CCS PCM C Compiler, Version 5.025, 7201               19-nov-21 21:54

               Filename:   C:\Users\danub\OneDrive\Área de Trabalho\git\eletronic-lock-system\PIC controller\main.lst

               ROM used:   1163 words (14%)
                           Largest free fragment is 2048
               RAM used:   49 (13%) at main() level
                           65 (18%) worst case
               Stack used: 5 locations (3 in main + 2 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   413
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   052
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.0
002E:  GOTO   031
002F:  BTFSC  0C.0
0030:  GOTO   055
0031:  MOVF   22,W
0032:  MOVWF  04
0033:  MOVF   23,W
0034:  MOVWF  77
0035:  MOVF   24,W
0036:  MOVWF  78
0037:  MOVF   25,W
0038:  MOVWF  79
0039:  MOVF   26,W
003A:  MOVWF  7A
003B:  MOVF   27,W
003C:  BSF    03.6
003D:  MOVWF  0D
003E:  BCF    03.6
003F:  MOVF   28,W
0040:  BSF    03.6
0041:  MOVWF  0F
0042:  BCF    03.6
0043:  MOVF   29,W
0044:  BSF    03.6
0045:  MOVWF  0C
0046:  BCF    03.6
0047:  MOVF   2A,W
0048:  BSF    03.6
0049:  MOVWF  0E
004A:  BCF    03.6
004B:  MOVF   20,W
004C:  MOVWF  0A
004D:  SWAPF  21,W
004E:  MOVWF  03
004F:  SWAPF  7F,F
0050:  SWAPF  7F,W
0051:  RETFIE
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   14C
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   134
....................  
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDWF  02,F
005C:  RETLW  28
005D:  RETLW  0F
005E:  RETLW  01
005F:  RETLW  06
0060:  DATA 0D,05
0061:  DATA D3,20
0062:  DATA D6,22
0063:  DATA D5,29
0064:  DATA 45,29
0065:  DATA 00,00
0066:  DATA 8C,2A
0067:  DATA F3,3A
0068:  DATA 61,39
0069:  DATA E9,37
006A:  DATA A0,21
006B:  DATA 61,32
006C:  DATA E1,39
006D:  DATA 74,39
006E:  DATA 61,32
006F:  DATA 6F,00
0070:  DATA 8C,24
0071:  DATA 44,10
0072:  DATA 69,37
0073:  DATA E3,37
0074:  DATA 6D,38
0075:  DATA 61,3A
0076:  DATA 69,3B
0077:  DATA 65,36
0078:  DATA 00,01
0079:  DATA 0D,05
007A:  DATA D4,32
007B:  DATA 6E,3A
007C:  DATA 65,10
007D:  DATA EE,37
007E:  DATA F6,30
007F:  DATA ED,32
0080:  DATA 6E,3A
0081:  DATA 65,00
0082:  DATA 0C,10
0083:  DATA C2,3A
0084:  DATA 74,3A
0085:  DATA 6F,37
0086:  DATA 3A,10
0087:  DATA 25,32
0088:  DATA 00,00
0089:  DATA 0D,05
008A:  DATA D0,3B
008B:  DATA BA,12
008C:  DATA E4,12
008D:  DATA E4,12
008E:  DATA E4,12
008F:  DATA 64,10
0090:  DATA 53,3A
0091:  DATA BA,12
0092:  DATA 64,10
0093:  DATA 25,32
0094:  DATA 00,00
0095:  DATA 8C,24
0096:  DATA 44,10
0097:  DATA 45,37
0098:  DATA E3,37
0099:  DATA 6E,3A
009A:  DATA F2,30
009B:  DATA E4,37
009C:  DATA BA,12
009D:  DATA F5,12
009E:  DATA 75,00
009F:  DATA 0C,10
00A0:  DATA 49,22
00A1:  DATA 20,27
00A2:  DATA A0,22
00A3:  DATA EE,31
00A4:  DATA 6F,37
00A5:  DATA 74,39
00A6:  DATA 61,32
00A7:  DATA 6F,00
00A8:  DATA 0C,10
00A9:  DATA D5,39
00AA:  DATA 65,39
00AB:  DATA A0,32
00AC:  DATA F2,30
00AD:  DATA F3,32
00AE:  DATA 64,10
00AF:  DATA 00,00
00B0:  DATA 8C,20
00B1:  DATA 64,32
00B2:  DATA F2,32
00B3:  DATA F3,39
00B4:  DATA 3A,10
00B5:  DATA 25,32
00B6:  DATA 00,00
00B7:  DATA 8C,24
00B8:  DATA 44,1D
00B9:  DATA A5,3A
00BA:  DATA 2C,10
00BB:  DATA 45,3C
00BC:  DATA E9,39
00BD:  DATA F4,32
00BE:  DATA 00,01
00BF:  DATA 8C,24
00C0:  DATA 44,1D
00C1:  DATA A5,3A
00C2:  DATA 2C,10
00C3:  DATA 4E,10
00C4:  DATA 45,3C
00C5:  DATA E9,39
00C6:  DATA F4,32
00C7:  DATA 00,00
00C8:  DATA 8C,18
00C9:  DATA 3A,10
00CA:  DATA C3,20
00CB:  DATA 44,10
00CC:  DATA 43,36
00CD:  DATA E9,32
00CE:  DATA 6E,3A
00CF:  DATA 65,10
00D0:  DATA 00,01
00D1:  DATA 0D,05
00D2:  DATA 32,1D
00D3:  DATA 20,22
00D4:  DATA 45,26
00D5:  DATA A0,21
00D6:  DATA EC,34
00D7:  DATA 65,37
00D8:  DATA F4,32
00D9:  DATA 00,01
00DA:  DATA 8C,19
00DB:  DATA 3A,10
00DC:  DATA C2,3A
00DD:  DATA F3,31
00DE:  DATA 61,39
00DF:  DATA A0,21
00E0:  DATA EC,34
00E1:  DATA 65,37
00E2:  DATA F4,32
00E3:  DATA 20,00
00E4:  DATA 0D,05
00E5:  DATA 34,1D
00E6:  DATA A0,22
00E7:  DATA E4,34
00E8:  DATA F4,30
00E9:  DATA 72,10
00EA:  DATA 43,36
00EB:  DATA E9,32
00EC:  DATA 6E,3A
00ED:  DATA 65,00
00EE:  DATA 8C,1A
00EF:  DATA 3A,10
00F0:  DATA D3,20
00F1:  DATA 49,29
00F2:  DATA 20,32
00F3:  DATA 6F,10
00F4:  DATA CD,32
00F5:  DATA EE,3A
00F6:  DATA 20,00
00F7:  DATA 0D,06
00F8:  DATA 20,21
00F9:  DATA 75,3A
00FA:  DATA F4,37
00FB:  DATA 6E,1D
00FC:  DATA A0,12
00FD:  DATA 63,00
00FE:  DATA 0C,22
00FF:  DATA E9,33
0100:  DATA 69,3A
0101:  DATA 65,10
0102:  DATA 6F,10
0103:  DATA 49,22
0104:  DATA 00,01
0105:  DATA 8C,37
0106:  DATA 70,3A
0107:  DATA E9,37
0108:  DATA 6E,1D
0109:  DATA A0,12
010A:  DATA 75,00
010B:  DATA 0C,10
010C:  DATA C2,3A
010D:  DATA 74,3A
010E:  DATA 6F,37
010F:  DATA 3A,10
0110:  DATA A5,31
0111:  DATA 00,01
0112:  DATA 0C,10
0113:  DATA C2,3A
0114:  DATA 74,3A
0115:  DATA 6F,37
0116:  DATA 3A,10
0117:  DATA A5,31
0118:  DATA 00,00
0119:  DATA 8C,20
011A:  DATA E4,36
011B:  DATA 69,37
011C:  DATA A0,22
011D:  DATA EE,31
011E:  DATA 6F,37
011F:  DATA 74,39
0120:  DATA 61,32
0121:  DATA 6F,00
0122:  DATA 0C,10
0123:  DATA 61,32
0124:  DATA ED,34
0125:  DATA EE,39
0126:  DATA 5B,18
0127:  DATA 5D,1D
0128:  DATA A0,12
0129:  DATA 64,00
012A:  DATA 0C,10
012B:  DATA D0,20
012C:  DATA D3,29
012D:  DATA CF,2A
012E:  DATA 20,00
012F:  DATA 8C,34
0130:  DATA 64,3F
0131:  DATA BA,12
0132:  DATA F5,12
0133:  DATA 75,00
*
0279:  DATA 0C,10
027A:  DATA A0,34
027B:  DATA EE,34
027C:  DATA E3,34
027D:  DATA 61,37
027E:  DATA E4,37
027F:  DATA 2E,17
0280:  DATA 2E,10
0281:  DATA 00,01
0282:  DATA 0C,10
0283:  DATA 6F,38
0284:  DATA BA,12
0285:  DATA 63,10
0286:  DATA 00,00
*
0362:  MOVF   0B,W
0363:  MOVWF  4B
0364:  BCF    0B.7
0365:  BSF    03.5
0366:  BSF    03.6
0367:  BSF    0C.7
0368:  BSF    0C.0
0369:  NOP
036A:  NOP
036B:  BCF    03.5
036C:  BCF    03.6
036D:  BTFSC  4B.7
036E:  BSF    0B.7
036F:  BSF    03.6
0370:  MOVF   0C,W
0371:  ANDLW  7F
0372:  BTFSC  03.2
0373:  GOTO   3B6
0374:  BCF    03.6
0375:  MOVWF  4B
0376:  BSF    03.6
0377:  MOVF   0D,W
0378:  BCF    03.6
0379:  MOVWF  4C
037A:  BSF    03.6
037B:  MOVF   0F,W
037C:  BCF    03.6
037D:  MOVWF  4D
037E:  MOVF   4B,W
037F:  MOVWF  4F
0380:  CALL   325
0381:  MOVF   4C,W
0382:  BSF    03.6
0383:  MOVWF  0D
0384:  BCF    03.6
0385:  MOVF   4D,W
0386:  BSF    03.6
0387:  MOVWF  0F
0388:  BCF    03.6
0389:  MOVF   0B,W
038A:  MOVWF  4E
038B:  BCF    0B.7
038C:  BSF    03.5
038D:  BSF    03.6
038E:  BSF    0C.7
038F:  BSF    0C.0
0390:  NOP
0391:  NOP
0392:  BCF    03.5
0393:  BCF    03.6
0394:  BTFSC  4E.7
0395:  BSF    0B.7
0396:  BSF    03.6
0397:  RLF    0C,W
0398:  RLF    0E,W
0399:  ANDLW  7F
039A:  BTFSC  03.2
039B:  GOTO   3B6
039C:  BCF    03.6
039D:  MOVWF  4B
039E:  BSF    03.6
039F:  MOVF   0D,W
03A0:  BCF    03.6
03A1:  MOVWF  4C
03A2:  BSF    03.6
03A3:  MOVF   0F,W
03A4:  BCF    03.6
03A5:  MOVWF  4D
03A6:  MOVF   4B,W
03A7:  MOVWF  4F
03A8:  CALL   325
03A9:  MOVF   4C,W
03AA:  BSF    03.6
03AB:  MOVWF  0D
03AC:  BCF    03.6
03AD:  MOVF   4D,W
03AE:  BSF    03.6
03AF:  MOVWF  0F
03B0:  INCF   0D,F
03B1:  BTFSC  03.2
03B2:  INCF   0F,F
03B3:  BCF    03.6
03B4:  GOTO   362
03B5:  BSF    03.6
03B6:  BCF    03.6
03B7:  BCF    0A.3
03B8:  BCF    0A.4
03B9:  GOTO   449 (RETURN)
03BA:  MOVF   0B,W
03BB:  MOVWF  4C
03BC:  BCF    0B.7
03BD:  BSF    03.5
03BE:  BSF    03.6
03BF:  BSF    0C.7
03C0:  BSF    0C.0
03C1:  NOP
03C2:  NOP
03C3:  BCF    03.5
03C4:  BCF    03.6
03C5:  BTFSC  4C.7
03C6:  BSF    0B.7
03C7:  BTFSC  03.0
03C8:  GOTO   3F1
03C9:  BSF    03.6
03CA:  MOVF   0C,W
03CB:  ANDLW  7F
03CC:  BCF    03.6
03CD:  MOVWF  4C
03CE:  BSF    03.6
03CF:  MOVF   0D,W
03D0:  BCF    03.6
03D1:  MOVWF  4D
03D2:  BSF    03.6
03D3:  MOVF   0F,W
03D4:  BCF    03.6
03D5:  MOVWF  4E
03D6:  MOVF   4C,W
03D7:  MOVWF  4F
03D8:  CALL   325
03D9:  MOVF   4D,W
03DA:  BSF    03.6
03DB:  MOVWF  0D
03DC:  BCF    03.6
03DD:  MOVF   4E,W
03DE:  BSF    03.6
03DF:  MOVWF  0F
03E0:  BCF    03.6
03E1:  MOVF   0B,W
03E2:  MOVWF  4F
03E3:  BCF    0B.7
03E4:  BSF    03.5
03E5:  BSF    03.6
03E6:  BSF    0C.7
03E7:  BSF    0C.0
03E8:  NOP
03E9:  NOP
03EA:  BCF    03.5
03EB:  BCF    03.6
03EC:  BTFSC  4F.7
03ED:  BSF    0B.7
03EE:  DECFSZ 4B,F
03EF:  GOTO   3F1
03F0:  GOTO   410
03F1:  BSF    03.6
03F2:  RLF    0C,W
03F3:  RLF    0E,W
03F4:  ANDLW  7F
03F5:  BCF    03.6
03F6:  MOVWF  4C
03F7:  BSF    03.6
03F8:  MOVF   0D,W
03F9:  BCF    03.6
03FA:  MOVWF  4D
03FB:  BSF    03.6
03FC:  MOVF   0F,W
03FD:  BCF    03.6
03FE:  MOVWF  4E
03FF:  MOVF   4C,W
0400:  MOVWF  4F
0401:  CALL   325
0402:  MOVF   4D,W
0403:  BSF    03.6
0404:  MOVWF  0D
0405:  BCF    03.6
0406:  MOVF   4E,W
0407:  BSF    03.6
0408:  MOVWF  0F
0409:  INCF   0D,F
040A:  BTFSC  03.2
040B:  INCF   0F,F
040C:  BCF    03.0
040D:  BCF    03.6
040E:  DECFSZ 4B,F
040F:  GOTO   3BA
0410:  BCF    0A.3
0411:  BCF    0A.4
0412:  GOTO   476 (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES HS  
....................  
.................... #use delay(crystal=20000000) 
*
0138:  MOVLW  5B
0139:  MOVWF  04
013A:  BCF    03.7
013B:  MOVF   00,W
013C:  BTFSC  03.2
013D:  GOTO   14B
013E:  MOVLW  06
013F:  MOVWF  78
0140:  CLRF   77
0141:  DECFSZ 77,F
0142:  GOTO   141
0143:  DECFSZ 78,F
0144:  GOTO   140
0145:  MOVLW  7B
0146:  MOVWF  77
0147:  DECFSZ 77,F
0148:  GOTO   147
0149:  DECFSZ 00,F
014A:  GOTO   13E
014B:  RETURN
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
....................  
.................... // -------Variables' Declaration 
.................... #define RX_BUFFER_SIZE 10 
.................... #define BLOCK_SIZE sizeof(User)  
.................... signed int8 address_data_delete; 
.................... int8 rx_wr_index = 0; 
.................... int8 lock_pos = 0, rxd, read, valid_data_count; 
.................... int data_avail = FALSE, got_id = FALSE; 
.................... unsigned char option; 
.................... unsigned int8 rx_buffer[RX_BUFFER_SIZE]; 
.................... #include "functions.c" 
.................... #include "functions.h" 
....................  
.................... //Define the default pins before calling the LCD driver 
.................... #ifndef lcd_enable  
....................    #define lcd_enable     pin_e1 
....................    #define lcd_rs         pin_e2 
....................    //#define lcd_rw       pin_e2   
....................    #define lcd_d4         pin_d4 
....................    #define lcd_d5         pin_d5 
....................    #define lcd_d6         pin_d6 
....................    #define lcd_d7         pin_d7 
.................... #endif 
....................  
.................... #include "mod_lcd.c" 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
....................    #define lcd_enable       pin_e1      // pino enable do LCD 
....................    #define lcd_rs         pin_e0      // pino rs do LCD 
....................    //#define lcd_rw      pin_e2      // pino rw  do LCD 
....................    #define lcd_d4         pin_d4      // pino de dados d4 do LCD 
....................    #define lcd_d5         pin_d5      // pino de dados d5 do LCD 
....................    #define lcd_d6         pin_d6      // pino de dados d6 do LCD 
....................    #define lcd_d7         pin_d7      // pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
....................    byte dado; 
....................    // configura os pinos de dados como entradas 
....................    input(lcd_d4); 
....................    input(lcd_d5); 
....................    input(lcd_d6); 
....................    input(lcd_d7); 
....................    // se o pino rw for utilizado, coloca em 1 
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_high(lcd_enable); // habilita display 
....................    dado = 0;   // zera a variável de leitura 
....................    // lê os quatro bits mais significativos 
....................    if (input(lcd_d7)) bit_set(dado,7); 
....................    if (input(lcd_d6)) bit_set(dado,6); 
....................    if (input(lcd_d5)) bit_set(dado,5); 
....................    if (input(lcd_d4)) bit_set(dado,4); 
....................    // dá um pulso na linha enable 
....................    output_low(lcd_enable); 
....................    output_high(lcd_enable); 
....................    // lê os quatro bits menos significativos 
....................    if (input(lcd_d7)) bit_set(dado,3); 
....................    if (input(lcd_d6)) bit_set(dado,2); 
....................    if (input(lcd_d5)) bit_set(dado,1); 
....................    if (input(lcd_d4)) bit_set(dado,0); 
....................    output_low(lcd_enable);   // desabilita o display 
....................    return dado;   // retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
....................    // coloca os quatro bits nas saidas 
....................    output_bit(lcd_d4,bit_test(dado,0)); 
*
0294:  BTFSC  57.0
0295:  GOTO   298
0296:  BCF    08.4
0297:  GOTO   299
0298:  BSF    08.4
0299:  BSF    03.5
029A:  BCF    08.4
....................    output_bit(lcd_d5,bit_test(dado,1)); 
029B:  BCF    03.5
029C:  BTFSC  57.1
029D:  GOTO   2A0
029E:  BCF    08.5
029F:  GOTO   2A1
02A0:  BSF    08.5
02A1:  BSF    03.5
02A2:  BCF    08.5
....................    output_bit(lcd_d6,bit_test(dado,2)); 
02A3:  BCF    03.5
02A4:  BTFSC  57.2
02A5:  GOTO   2A8
02A6:  BCF    08.6
02A7:  GOTO   2A9
02A8:  BSF    08.6
02A9:  BSF    03.5
02AA:  BCF    08.6
....................    output_bit(lcd_d7,bit_test(dado,3)); 
02AB:  BCF    03.5
02AC:  BTFSC  57.3
02AD:  GOTO   2B0
02AE:  BCF    08.7
02AF:  GOTO   2B1
02B0:  BSF    08.7
02B1:  BSF    03.5
02B2:  BCF    08.7
....................    // dá um pulso na linha enable 
....................    output_high(lcd_enable); 
02B3:  BCF    09.1
02B4:  BCF    03.5
02B5:  BSF    09.1
....................    output_low(lcd_enable); 
02B6:  BSF    03.5
02B7:  BCF    09.1
02B8:  BCF    03.5
02B9:  BCF    09.1
02BA:  RETURN
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
....................    // coloca a linha rs em 0 
....................    output_low(lcd_rs); 
02BB:  BSF    03.5
02BC:  BCF    09.2
02BD:  BCF    03.5
02BE:  BCF    09.2
....................    // aguarda o display ficar desocupado 
....................    //while ( bit_test(lcd_le_byte(),7) ) ; 
....................    // configura a linha rs dependendo do modo selecionado 
....................    output_bit(lcd_rs,endereco); 
02BF:  MOVF   54,F
02C0:  BTFSS  03.2
02C1:  GOTO   2C4
02C2:  BCF    09.2
02C3:  GOTO   2C5
02C4:  BSF    09.2
02C5:  BSF    03.5
02C6:  BCF    09.2
....................    delay_us(100);   // aguarda 100 us 
02C7:  MOVLW  A6
02C8:  MOVWF  77
02C9:  DECFSZ 77,F
02CA:  GOTO   2C9
02CB:  NOP
....................    // caso a linha rw esteja definida, coloca em 0 
....................    #ifdef lcd_rw 
....................       output_low(lcd_rw); 
....................    #endif 
....................    // desativa linha enable 
....................    output_low(lcd_enable); 
02CC:  BCF    09.1
02CD:  BCF    03.5
02CE:  BCF    09.1
....................    // envia a primeira parte do byte 
....................    lcd_envia_nibble(dado >> 4); 
02CF:  SWAPF  55,W
02D0:  MOVWF  56
02D1:  MOVLW  0F
02D2:  ANDWF  56,F
02D3:  MOVF   56,W
02D4:  MOVWF  57
02D5:  CALL   294
....................    // envia a segunda parte do byte 
....................    lcd_envia_nibble(dado & 0x0f); 
02D6:  MOVF   55,W
02D7:  ANDLW  0F
02D8:  MOVWF  56
02D9:  MOVWF  57
02DA:  CALL   294
02DB:  RETURN
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
....................    byte conta; 
....................    output_low(lcd_d4); 
02DC:  BSF    03.5
02DD:  BCF    08.4
02DE:  BCF    03.5
02DF:  BCF    08.4
....................    output_low(lcd_d5); 
02E0:  BSF    03.5
02E1:  BCF    08.5
02E2:  BCF    03.5
02E3:  BCF    08.5
....................    output_low(lcd_d6); 
02E4:  BSF    03.5
02E5:  BCF    08.6
02E6:  BCF    03.5
02E7:  BCF    08.6
....................    output_low(lcd_d7); 
02E8:  BSF    03.5
02E9:  BCF    08.7
02EA:  BCF    03.5
02EB:  BCF    08.7
....................    output_low(lcd_rs); 
02EC:  BSF    03.5
02ED:  BCF    09.2
02EE:  BCF    03.5
02EF:  BCF    09.2
....................    #ifdef lcd_rw 
....................       output_high(lcd_rw); 
....................    #endif 
....................    output_low(lcd_enable); 
02F0:  BSF    03.5
02F1:  BCF    09.1
02F2:  BCF    03.5
02F3:  BCF    09.1
02F4:  CLRF   2B
02F5:  BTFSC  0B.7
02F6:  BSF    2B.7
02F7:  BCF    0B.7
....................    delay_ms(15); 
02F8:  MOVLW  0F
02F9:  MOVWF  5B
02FA:  CALL   138
02FB:  BTFSC  2B.7
02FC:  BSF    0B.7
....................    // envia uma seqüência de 3 vezes 0x03 
....................    // e depois 0x02 para configurar o módulo 
....................    // para modo de 4 bits 
....................    for(conta=1;conta<=3;++conta) 
02FD:  MOVLW  01
02FE:  MOVWF  4B
02FF:  MOVF   4B,W
0300:  SUBLW  03
0301:  BTFSS  03.0
0302:  GOTO   311
....................    { 
....................       lcd_envia_nibble(3); 
0303:  MOVLW  03
0304:  MOVWF  57
0305:  CALL   294
0306:  CLRF   2B
0307:  BTFSC  0B.7
0308:  BSF    2B.7
0309:  BCF    0B.7
....................       delay_ms(5); 
030A:  MOVLW  05
030B:  MOVWF  5B
030C:  CALL   138
030D:  BTFSC  2B.7
030E:  BSF    0B.7
030F:  INCF   4B,F
0310:  GOTO   2FF
....................    } 
....................    lcd_envia_nibble(2); 
0311:  MOVLW  02
0312:  MOVWF  57
0313:  CALL   294
....................    // envia string de inicialização do display 
....................    for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
0314:  CLRF   4B
0315:  MOVF   4B,W
0316:  SUBLW  03
0317:  BTFSS  03.0
0318:  GOTO   322
0319:  MOVF   4B,W
031A:  CALL   058
031B:  MOVWF  4C
031C:  CLRF   54
031D:  MOVF   4C,W
031E:  MOVWF  55
031F:  CALL   2BB
0320:  INCF   4B,F
0321:  GOTO   315
0322:  BCF    0A.3
0323:  BCF    0A.4
0324:  GOTO   43C (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
0345:  DECFSZ 51,W
0346:  GOTO   348
0347:  GOTO   34B
....................       endereco = lcd_seg_lin; 
0348:  MOVLW  40
0349:  MOVWF  52
034A:  GOTO   34C
....................    else 
....................       endereco = 0; 
034B:  CLRF   52
....................    endereco += x-1; 
034C:  MOVLW  01
034D:  SUBWF  50,W
034E:  ADDWF  52,F
....................    lcd_envia_byte(0,0x80|endereco); 
034F:  MOVF   52,W
0350:  IORLW  80
0351:  MOVWF  53
0352:  CLRF   54
0353:  MOVF   53,W
0354:  MOVWF  55
0355:  CALL   2BB
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
*
0325:  MOVF   4F,W
0326:  XORLW  0C
0327:  BTFSC  03.2
0328:  GOTO   333
0329:  XORLW  06
032A:  BTFSC  03.2
032B:  GOTO   341
032C:  XORLW  07
032D:  BTFSC  03.2
032E:  GOTO   341
032F:  XORLW  05
0330:  BTFSC  03.2
0331:  GOTO   357
0332:  GOTO   35C
....................    { 
....................      case '\f'    :   lcd_envia_byte(0,1); 
0333:  CLRF   54
0334:  MOVLW  01
0335:  MOVWF  55
0336:  CALL   2BB
0337:  CLRF   2B
0338:  BTFSC  0B.7
0339:  BSF    2B.7
033A:  BCF    0B.7
....................               delay_ms(2); 
033B:  MOVLW  02
033C:  MOVWF  5B
033D:  CALL   138
033E:  BTFSC  2B.7
033F:  BSF    0B.7
....................             break; 
0340:  GOTO   361
....................      case '\n'   : 
....................      case '\r'    :   lcd_pos_xy(1,2); 
0341:  MOVLW  01
0342:  MOVWF  50
0343:  MOVLW  02
0344:  MOVWF  51
....................               break; 
*
0356:  GOTO   361
....................      case '\b'    :   lcd_envia_byte(0,0x10); 
0357:  CLRF   54
0358:  MOVLW  10
0359:  MOVWF  55
035A:  CALL   2BB
....................               break; 
035B:  GOTO   361
....................      default   :   lcd_envia_byte(1,c); 
035C:  MOVLW  01
035D:  MOVWF  54
035E:  MOVF   4F,W
035F:  MOVWF  55
0360:  CALL   2BB
....................               break; 
....................    } 
0361:  RETURN
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
....................    char valor; 
....................    // seleciona a posição do caractere 
....................    lcd_pos_xy(x,y); 
....................    // ativa rs 
....................    output_high(lcd_rs); 
....................    // lê o caractere 
....................    valor = lcd_le_byte(); 
....................    // desativa rs 
....................    output_low(lcd_rs); 
....................    // retorna o valor do caractere 
....................    return valor; 
.................... } 
....................  
....................  
.................... #include "2401.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a MicroChip 24LC01B configured for a x8 org         //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);  Read the byte d from the address a     //// 
.................... ////                                                                   //// 
.................... ////   b = ext_eeprom_ready();  Returns TRUE if the eeprom is ready    //// 
.................... ////                            to receive opcodes                     //// 
.................... ////                                                                   //// 
.................... ////   The main program may define EEPROM_SDA                          //// 
.................... ////   and EEPROM_SCL to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... ////                            Pin Layout                             //// 
.................... ////   -----------------------------------------------------------     //// 
.................... ////   |                                                         |     //// 
.................... ////   | 1: NC   Not Connected | 8: VCC   +5V                    |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 2: NC   Not Connected | 7: WP    GND                    |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 3: NC   Not Connected | 6: SCL   EEPROM_SCL and Pull-Up |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 4: VSS  GND           | 5: SDA   EEPROM_SDA and Pull-Up |     //// 
.................... ////   -----------------------------------------------------------     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
....................  
.................... #use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
....................  
.................... #define EEPROM_ADDRESS BYTE 
.................... #define EEPROM_SIZE    128 
....................  
.................... void init_ext_eeprom() { 
....................    output_float(EEPROM_SCL); 
*
0287:  BSF    3F.3
0288:  MOVF   3F,W
0289:  BSF    03.5
028A:  MOVWF  07
....................    output_float(EEPROM_SDA); 
028B:  BCF    03.5
028C:  BSF    3F.4
028D:  MOVF   3F,W
028E:  BSF    03.5
028F:  MOVWF  07
0290:  BCF    03.5
0291:  BCF    0A.3
0292:  BCF    0A.4
0293:  GOTO   436 (RETURN)
.................... } 
....................  
.................... BOOLEAN ext_eeprom_ready() { 
....................    int1 ack; 
....................    i2c_start();            // If the write command is acknowledged, 
....................    ack = i2c_write(0xa0);  // then the device is ready. 
....................    i2c_stop(); 
....................    return !ack; 
.................... } 
....................  
.................... void write_ext_eeprom(BYTE address, BYTE data) { 
....................    while(!ext_eeprom_ready()); 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address); 
....................    i2c_write(data); 
....................    i2c_stop(); 
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(BYTE address) { 
....................    BYTE data; 
....................  
....................    while(!ext_eeprom_ready()); 
....................    i2c_start(); 
....................    i2c_write(0xa0); 
....................    i2c_write(address); 
....................    i2c_start(); 
....................    i2c_write(0xa1); 
....................    data=i2c_read(0); 
....................    i2c_stop(); 
....................    return(data); 
.................... } 
....................  
.................... #include "kbd_board4.c" 
.................... /*######################################################################  
....................    Rotina utilização do teclado da placa PicSim board4 
....................    Adaptada para o compilador CCS 
....................    Autor: Alberto Willia Mascarenhas (adaptou para o compilador) 
....................    For e-mail suggestions :  awmascarenhas@gmail.com 
.................... ######################################################################## */ 
.................... unsigned char tc_tecla(unsigned int timeout) 
*
014E:  CLRF   59
014F:  CLRF   5A
.................... { 
....................   unsigned int to=0; 
....................   unsigned char k = 0;   
....................   while(((to < timeout)||(!timeout))&&(!k)){ 
0150:  MOVF   58,W
0151:  SUBWF  59,W
0152:  BTFSS  03.0
0153:  GOTO   157
0154:  MOVF   58,F
0155:  BTFSS  03.2
0156:  GOTO   26C
0157:  MOVF   5A,F
0158:  BTFSS  03.2
0159:  GOTO   26C
....................       
....................        
....................       //------------------------------------------------------------------------- 
....................       //inicio do programa de varredura do teclado matricial 
....................       //-------------------------------------------------------------------------- 
....................       //habilita primeira coluna do teclado 
....................       output_low(PIN_B0);output_high(PIN_B1);output_high(PIN_B2);output_high(PIN_B3); 
015A:  BSF    03.5
015B:  BCF    06.0
015C:  BCF    03.5
015D:  BCF    06.0
015E:  BSF    03.5
015F:  BCF    06.1
0160:  BCF    03.5
0161:  BSF    06.1
0162:  BSF    03.5
0163:  BCF    06.2
0164:  BCF    03.5
0165:  BSF    06.2
0166:  BSF    03.5
0167:  BCF    06.3
0168:  BCF    03.5
0169:  BSF    06.3
....................       delay_ms(20); 
016A:  MOVLW  14
016B:  MOVWF  5B
016C:  CALL   138
....................       if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='1';}; 
016D:  BSF    03.5
016E:  BSF    08.0
016F:  BCF    03.5
0170:  BTFSC  08.0
0171:  GOTO   179
0172:  BSF    03.5
0173:  BSF    08.0
0174:  BCF    03.5
0175:  BTFSS  08.0
0176:  GOTO   172
0177:  MOVLW  31
0178:  MOVWF  5A
....................       if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='4';}; 
0179:  BSF    03.5
017A:  BSF    08.1
017B:  BCF    03.5
017C:  BTFSC  08.1
017D:  GOTO   185
017E:  BSF    03.5
017F:  BSF    08.1
0180:  BCF    03.5
0181:  BTFSS  08.1
0182:  GOTO   17E
0183:  MOVLW  34
0184:  MOVWF  5A
....................       if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='7';}; 
0185:  BSF    03.5
0186:  BSF    08.2
0187:  BCF    03.5
0188:  BTFSC  08.2
0189:  GOTO   191
018A:  BSF    03.5
018B:  BSF    08.2
018C:  BCF    03.5
018D:  BTFSS  08.2
018E:  GOTO   18A
018F:  MOVLW  37
0190:  MOVWF  5A
....................       if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='*';}; 
0191:  BSF    03.5
0192:  BSF    08.3
0193:  BCF    03.5
0194:  BTFSC  08.3
0195:  GOTO   19D
0196:  BSF    03.5
0197:  BSF    08.3
0198:  BCF    03.5
0199:  BTFSS  08.3
019A:  GOTO   196
019B:  MOVLW  2A
019C:  MOVWF  5A
....................       //habilita segunda coluna do teclado 
....................       output_high(PIN_B0);output_low(PIN_B1);output_high(PIN_B2);output_high(PIN_B3); 
019D:  BSF    03.5
019E:  BCF    06.0
019F:  BCF    03.5
01A0:  BSF    06.0
01A1:  BSF    03.5
01A2:  BCF    06.1
01A3:  BCF    03.5
01A4:  BCF    06.1
01A5:  BSF    03.5
01A6:  BCF    06.2
01A7:  BCF    03.5
01A8:  BSF    06.2
01A9:  BSF    03.5
01AA:  BCF    06.3
01AB:  BCF    03.5
01AC:  BSF    06.3
....................       delay_ms(20);       
01AD:  MOVLW  14
01AE:  MOVWF  5B
01AF:  CALL   138
....................       if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='2';}; 
01B0:  BSF    03.5
01B1:  BSF    08.0
01B2:  BCF    03.5
01B3:  BTFSC  08.0
01B4:  GOTO   1BC
01B5:  BSF    03.5
01B6:  BSF    08.0
01B7:  BCF    03.5
01B8:  BTFSS  08.0
01B9:  GOTO   1B5
01BA:  MOVLW  32
01BB:  MOVWF  5A
....................       if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='5';}; 
01BC:  BSF    03.5
01BD:  BSF    08.1
01BE:  BCF    03.5
01BF:  BTFSC  08.1
01C0:  GOTO   1C8
01C1:  BSF    03.5
01C2:  BSF    08.1
01C3:  BCF    03.5
01C4:  BTFSS  08.1
01C5:  GOTO   1C1
01C6:  MOVLW  35
01C7:  MOVWF  5A
....................       if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='8';}; 
01C8:  BSF    03.5
01C9:  BSF    08.2
01CA:  BCF    03.5
01CB:  BTFSC  08.2
01CC:  GOTO   1D4
01CD:  BSF    03.5
01CE:  BSF    08.2
01CF:  BCF    03.5
01D0:  BTFSS  08.2
01D1:  GOTO   1CD
01D2:  MOVLW  38
01D3:  MOVWF  5A
....................       if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='0';}; 
01D4:  BSF    03.5
01D5:  BSF    08.3
01D6:  BCF    03.5
01D7:  BTFSC  08.3
01D8:  GOTO   1E0
01D9:  BSF    03.5
01DA:  BSF    08.3
01DB:  BCF    03.5
01DC:  BTFSS  08.3
01DD:  GOTO   1D9
01DE:  MOVLW  30
01DF:  MOVWF  5A
....................        
....................       //habilita terceira coluna do teclado 
....................       output_high(PIN_B0);output_high(PIN_B1);output_low(PIN_B2);output_high(PIN_B3); 
01E0:  BSF    03.5
01E1:  BCF    06.0
01E2:  BCF    03.5
01E3:  BSF    06.0
01E4:  BSF    03.5
01E5:  BCF    06.1
01E6:  BCF    03.5
01E7:  BSF    06.1
01E8:  BSF    03.5
01E9:  BCF    06.2
01EA:  BCF    03.5
01EB:  BCF    06.2
01EC:  BSF    03.5
01ED:  BCF    06.3
01EE:  BCF    03.5
01EF:  BSF    06.3
....................       delay_ms(20);       
01F0:  MOVLW  14
01F1:  MOVWF  5B
01F2:  CALL   138
....................       if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='3';}; 
01F3:  BSF    03.5
01F4:  BSF    08.0
01F5:  BCF    03.5
01F6:  BTFSC  08.0
01F7:  GOTO   1FF
01F8:  BSF    03.5
01F9:  BSF    08.0
01FA:  BCF    03.5
01FB:  BTFSS  08.0
01FC:  GOTO   1F8
01FD:  MOVLW  33
01FE:  MOVWF  5A
....................       if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='6';}; 
01FF:  BSF    03.5
0200:  BSF    08.1
0201:  BCF    03.5
0202:  BTFSC  08.1
0203:  GOTO   20B
0204:  BSF    03.5
0205:  BSF    08.1
0206:  BCF    03.5
0207:  BTFSS  08.1
0208:  GOTO   204
0209:  MOVLW  36
020A:  MOVWF  5A
....................       if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='9';}; 
020B:  BSF    03.5
020C:  BSF    08.2
020D:  BCF    03.5
020E:  BTFSC  08.2
020F:  GOTO   217
0210:  BSF    03.5
0211:  BSF    08.2
0212:  BCF    03.5
0213:  BTFSS  08.2
0214:  GOTO   210
0215:  MOVLW  39
0216:  MOVWF  5A
....................       if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='#';}; 
0217:  BSF    03.5
0218:  BSF    08.3
0219:  BCF    03.5
021A:  BTFSC  08.3
021B:  GOTO   223
021C:  BSF    03.5
021D:  BSF    08.3
021E:  BCF    03.5
021F:  BTFSS  08.3
0220:  GOTO   21C
0221:  MOVLW  23
0222:  MOVWF  5A
....................   
....................        //habilita quarta coluna do teclado 
....................       output_high(PIN_B0);output_high(PIN_B1);output_high(PIN_B2);output_low(PIN_B3); 
0223:  BSF    03.5
0224:  BCF    06.0
0225:  BCF    03.5
0226:  BSF    06.0
0227:  BSF    03.5
0228:  BCF    06.1
0229:  BCF    03.5
022A:  BSF    06.1
022B:  BSF    03.5
022C:  BCF    06.2
022D:  BCF    03.5
022E:  BSF    06.2
022F:  BSF    03.5
0230:  BCF    06.3
0231:  BCF    03.5
0232:  BCF    06.3
....................       delay_ms(20);       
0233:  MOVLW  14
0234:  MOVWF  5B
0235:  CALL   138
....................       if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='A';}; 
0236:  BSF    03.5
0237:  BSF    08.0
0238:  BCF    03.5
0239:  BTFSC  08.0
023A:  GOTO   242
023B:  BSF    03.5
023C:  BSF    08.0
023D:  BCF    03.5
023E:  BTFSS  08.0
023F:  GOTO   23B
0240:  MOVLW  41
0241:  MOVWF  5A
....................       if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='B';}; 
0242:  BSF    03.5
0243:  BSF    08.1
0244:  BCF    03.5
0245:  BTFSC  08.1
0246:  GOTO   24E
0247:  BSF    03.5
0248:  BSF    08.1
0249:  BCF    03.5
024A:  BTFSS  08.1
024B:  GOTO   247
024C:  MOVLW  42
024D:  MOVWF  5A
....................       if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='C';}; 
024E:  BSF    03.5
024F:  BSF    08.2
0250:  BCF    03.5
0251:  BTFSC  08.2
0252:  GOTO   25A
0253:  BSF    03.5
0254:  BSF    08.2
0255:  BCF    03.5
0256:  BTFSS  08.2
0257:  GOTO   253
0258:  MOVLW  43
0259:  MOVWF  5A
....................       if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='D';}; 
025A:  BSF    03.5
025B:  BSF    08.3
025C:  BCF    03.5
025D:  BTFSC  08.3
025E:  GOTO   266
025F:  BSF    03.5
0260:  BSF    08.3
0261:  BCF    03.5
0262:  BTFSS  08.3
0263:  GOTO   25F
0264:  MOVLW  44
0265:  MOVWF  5A
....................   
....................       //printf (lcd_escreve,"\f saiu geral %u",k); 
....................       //delay_ms(1000); 
....................       delay_ms(5); 
0266:  MOVLW  05
0267:  MOVWF  5B
0268:  CALL   138
....................       to+=5; 
0269:  MOVLW  05
026A:  ADDWF  59,F
026B:  GOTO   150
....................   } 
....................    if(!k)k=255; 
026C:  MOVF   5A,F
026D:  BTFSS  03.2
026E:  GOTO   271
026F:  MOVLW  FF
0270:  MOVWF  5A
....................   return k;   
0271:  MOVF   5A,W
0272:  MOVWF  78
.................... } 
....................  
....................  
....................  
....................  
....................  
.................... // -----------------Functions 
.................... void saveUser(int * id, int * pass, int status); 
.................... int getAddressByID(int * id);    
.................... int deleteUser(int address); 
....................  
.................... int isIdAvailable(int id);     
.................... void printUser(); 
.................... void erase_program_eeprom(int addrr); 
.................... int incrementID(); 
.................... int lastNewUserPosition(); 
.................... void resetMemory(); 
.................... void adminMenu(); 
.................... unsigned char readKeyboard();  
.................... int * getAdminsID(); 
.................... void listAdmins(); 
....................  
....................  
.................... typedef struct {  
....................    int id[2]; 
....................    int pass[4]; //password 
....................    int status; //0 - Unpaid, 1 - Paid, 3 - Admin 
.................... }User; 
....................  
....................  
....................  
.................... void saveUser(int * id, int * pass, int status){ 
....................       printf (lcd_escreve,"\r\nSAVEUSER"); 
....................       delay_ms(1000); 
....................    if( id[0] < 256 && id[1] < 256 && getAddressByID(id) > -1 ){ 
....................       int address = lastNewUserPosition(); 
....................       //recebe os parÃ¢metros do usuÃ¡rio 
....................       User user; 
....................       user.id[0] = id[0]; 
....................       user.id[1] = id[1]; 
....................       user.pass[0] = pass[0]; 
....................       user.pass[1] = pass[1]; 
....................       user.pass[2] = pass[2]; 
....................       user.pass[3] = pass[3]; 
....................       user.status = status; 
....................        
....................  
....................       //Corrigir isso, o endereÃ§o tem que ser "dinÃ¢mico" 
....................        
....................       write_ext_eeprom(address, user.id[0]); 
....................       write_ext_eeprom(address+1, user.id[1]); 
....................       write_ext_eeprom(address+2, user.pass[0]); 
....................       write_ext_eeprom(address+3, user.pass[1]); 
....................       write_ext_eeprom(address+4, user.pass[2]); 
....................       write_ext_eeprom(address+5, user.pass[3]);        
....................       write_ext_eeprom(address+6, user.status); 
....................     
....................  
....................       printf (lcd_escreve,"\fUsuario Cadastrado"); 
....................       delay_ms(500); 
....................  
....................    }else{ 
....................       printf (lcd_escreve,"\fID incompativel"); 
....................       printf (lcd_escreve,"\r\nTente novamente"); 
....................       delay_ms(1000); 
....................  
....................    } 
.................... } 
....................  
.................... void printUser(){ 
....................    //delay_ms(50); 
....................    int tmp_result = read_ext_eeprom(0);   
....................     
....................    delay_ms(50);   
....................     
....................    printf (lcd_escreve,"\f Button: %d", tmp_result); 
....................    printf(lcd_escreve, "\r\nPw:%d%d%d%d St:%d %d", read_ext_eeprom(1), read_ext_eeprom(2), read_ext_eeprom(3), read_ext_eeprom(4), read_ext_eeprom(5), read_ext_eeprom(6)); 
....................     
....................    //printf(lcd_escreve, "\f Client () elseÂ´{}{} 
....................    // printf(lcd_escreve, "\r\nPw:%c%c%c%c St:%c %c", U1.pass[0], U1.pass[1], U1.pass[2], U1.pass[3], U1.status, U1.type_usr); 
.................... } 
....................  
.................... int getAddressByID(int * id){ 
....................    int id_temp[2]; 
....................    int address = 0; 
....................     
....................    while( read_ext_eeprom(address) != -1){ 
....................       id_temp[0] = read_ext_eeprom(address); 
....................       id_temp[1] = read_ext_eeprom(address+1); 
....................        
....................       if (id_temp[0] == id[0] && id_temp[1] == id[1]){ 
....................          printf (lcd_escreve,"\fID Encontrado:%u%u", id_temp[0],id_temp[1]); 
....................          delay_ms(1000); 
....................          return address; 
....................       } 
....................  
....................       address += BLOCK_SIZE;  
....................    } 
....................    printf (lcd_escreve,"\f ID N Encontrado"); 
....................    return -1; 
....................     
.................... } 
....................  
.................... void erase_program_eeprom(int addrr){ 
....................    for(int i=0; i < BLOCK_SIZE; i++){ 
....................          write_ext_eeprom(addrr + i, -1); 
....................    }   
....................    printf (lcd_escreve,"\f User erased "); 
....................    delay_ms(500); 
.................... } 
....................  
.................... int deleteUser(int8 address){ 
....................     
....................    int data_temp; 
....................    int previous_block = address; 
....................    int next_block = address + BLOCK_SIZE; 
....................  
....................    //Case 1: without next block 
....................    if (read_ext_eeprom(next_block) == -1){ 
....................       erase_program_eeprom(previous_block);       
....................       return 1; 
....................    } 
....................  
....................    //Case 2: Check whether the data in the address is empty 
....................    while(read_ext_eeprom(next_block) != -1){ 
....................       //data_temp[index] = read_ext_eeprom(address); 
....................       for(int i=0; i < BLOCK_SIZE; i++){ 
....................          data_temp = read_ext_eeprom(next_block + i);            
....................          write_ext_eeprom(previous_block + i, data_temp);    //overwrite delete block 
....................       }   
....................  
....................       previous_block = next_block; 
....................       next_block += BLOCK_SIZE; 
....................    } 
....................     
....................    next_block -= BLOCK_SIZE; 
....................     
....................    //Erase last block   
....................    erase_program_eeprom(next_block); 
....................     
....................    return 1; 
....................  
.................... } 
....................  
.................... int lastNewUserPosition(){ 
....................    int address = 0; 
....................    int id_temp; 
....................  
....................    while( read_ext_eeprom(address) != -1){ 
....................       address += BLOCK_SIZE;  
....................    } 
....................    printf (lcd_escreve,"\fAddress: %d", address); 
....................    delay_ms(1000); 
....................     
....................    return address; 
....................  
.................... } 
....................  
.................... int isIdAvailable(int * id){ 
....................    unsigned int address = 0; 
....................    int id_temp; 
....................    while( read_ext_eeprom(address) != -1){ 
....................       id_temp = read_ext_eeprom(address); 
....................       if (id_temp == id){ 
....................           printf (lcd_escreve,"\fID:%u, Existe", id_temp); 
....................           delay_ms(1000); 
....................          return 0;//Sucessful 
....................       } 
....................  
....................       address += BLOCK_SIZE;  
....................    } 
....................    printf (lcd_escreve,"\fID:%u, N Existe", id_temp); 
....................    delay_ms(1000); 
....................    return -1; 
.................... } 
....................  
.................... void resetMemory(){ 
....................    int address = 0; 
....................    for(; read_ext_eeprom(address) != -1; 
....................     erase_program_eeprom(address), address += BLOCK_SIZE); 
.................... } 
....................  
.................... void adminMenu(){ 
....................  
....................   unsigned char keyboard_buffer[BLOCK_SIZE]; 
....................    printf(lcd_escreve,"\f1: CAD Cliente "); 
....................    delay_ms(500); 
....................    printf(lcd_escreve,"\r\n2: DEL Cliente"); 
....................    delay_ms(500); 
....................    printf(lcd_escreve,"\f3: Buscar Cliente "); 
....................    delay_ms(500); 
....................    printf(lcd_escreve,"\r\n4: Editar Cliente"); 
....................    delay_ms(500); 
....................    printf(lcd_escreve,"\f5: SAIR do Menu "); 
....................    delay_ms(500); 
....................   do{ 
....................      
....................  
....................      printf(lcd_escreve,"\r\f Button: %c", option); 
....................      delay_ms(1000); 
....................  
....................  
....................     switch(option){ 
....................        case 1: 
....................          // int pass [4] ={1,2,3,4}; 
....................          // int id [2] = {12,12}; 
....................            int i = 0; 
....................            while( option != '#' ){ 
....................  
....................                printf(lcd_escreve,"\fDigite o ID"); 
....................                delay_ms(500); 
....................                if(option != 255){ 
....................                  printf(lcd_escreve,"\foption: %u", option); 
....................                  delay_ms(500); 
....................                  keyboard_buffer[i] += option; 
....................                  i++; 
....................                  if(i > 4){ 
....................                     i = 0; 
....................                  } 
....................                } 
....................                printf(lcd_escreve,"\f Button: %c", option); 
....................                delay_ms(1000); 
....................                printf(lcd_escreve,"\f Button: %c", option); 
....................                delay_ms(1000); 
....................            } 
....................  
....................          //   saveUser(); 
....................             break; 
....................        case 2: 
....................             // listar(); 
....................             break; 
....................        case 3: 
....................             // mostrarMes(); 
....................             break; 
....................        case 4: 
....................             //  printf("\nTENHA UM BOM DIA\n"); 
....................             break; 
....................        default: 
....................             // printf("\nDIGITE UM VALOR VÃLIDO\n"); 
....................             break; 
....................  
....................       } 
....................    }while(option != 4);//sÃ³ termina quando for 4  
....................     
....................   
....................  
....................     
.................... } 
....................  
.................... unsigned char readKeyboard(){ 
....................    unsigned char tmp; 
....................    unsigned char tmp_result; 
....................     
....................    tmp = tc_tecla(1500); // ms 
....................    // if(tmp != 255){ 
....................    //    write_ext_eeprom(0, tmp); 
....................    //    delay_ms(50); 
....................    //    tmp_result = read_ext_eeprom(0); 
....................    //    delay_ms(50); 
....................    //    // tmp_result = tmp; 
....................    //    printf(lcd_escreve,"\f Button: %c", tmp_result); 
....................    // }else{  
....................    //    printf(lcd_escreve,"\f   TECLADO  "); 
....................    // } 
....................    return tmp; 
.................... } 
....................  
....................  
.................... int * getAdminsID(){ 
....................  
....................    int address = 0; 
....................    int temp_status; 
....................    int index= 0; 
....................    static int admins[BLOCK_SIZE]; 
*
0424:  BCF    03.5
0425:  CLRF   40
0426:  CLRF   41
0427:  CLRF   42
0428:  CLRF   43
0429:  CLRF   44
042A:  CLRF   45
042B:  CLRF   46
....................    admins[0] = -1; 
....................    while( read_ext_eeprom(address) != -1){ 
....................       temp_status = read_ext_eeprom(address + (BLOCK_SIZE - 1));//status of the user 
....................       if (temp_status == 3){ 
....................          printf (lcd_escreve,"\fAdmin Encontrado"); 
....................          delay_ms(1000); 
....................          for(int i=0; i < 2; i++){ 
....................             int id = read_ext_eeprom(address+i);    
....................             admins[index] = id; 
....................             index++; 
....................          } 
....................  
....................       } 
....................  
....................       address += BLOCK_SIZE;  
....................    } 
....................  
....................    return admins; 
....................  
.................... } 
....................  
.................... void listAdmins(){ 
....................    int * admins; 
....................  
....................    admins = getAdminsID(); 
....................    printf(lcd_escreve,"\f admins[0]: %d", admins[0]); 
....................    delay_ms(1000); 
....................    if(admins[0] != -1){ 
....................       printf(lcd_escreve,"\f PASSOU "); 
....................       delay_ms(1000); 
....................       for (int16 i=0; i < sizeof(admins); i+=2){ 
....................          printf(lcd_escreve, "\fid~:%u%u",admins[i], admins[i+1]); 
....................          delay_ms(1000); 
....................       }  
....................    } 
.................... } 
....................  
....................  
....................  
.................... /* 
.................... // ---- MSG from serial communication 
.................... #int_RDA 
.................... void RDA_isr(void){ 
....................    rx_buffer[rx_wr_index] = getc(); 
....................    rxd = rx_buffer[rx_wr_index]; 
....................    rx_wr_index++; 
....................  
....................    if(rx_wr_index > RX_BUFFER_SIZE){ 
....................       rx_wr_index = 0; 
....................    } 
....................  
....................    //Look for unique ID: "IFMT" 
....................    if(rxd == 'I' && lock_pos == 0){ 
....................       lock_pos++; 
....................    } 
....................    else if(rxd == 'F' && lock_pos == 1){ 
....................       lock_pos++; 
....................    } 
....................    else if(rxd == 'M' && lock_pos == 2){ 
....................       lock_pos++; 
....................    } 
....................    else if(rxd == 'T' && lock_pos == 3){ 
....................       lock_pos=0; //Reset the "combination lock" 
....................       got_id = TRUE; 
....................       read = rxd; 
....................       //get ready to count the number of data bytes 
....................       valid_data_count = 0xff;  
....................  
....................       //buffer is reset to index 0 
....................       rx_wr_index = 0; 
....................    }else { 
....................       lock_pos = 0; 
....................    } 
....................  
....................    if(got_id && ++valid_data_count >= 6){ 
....................       data_avail = TRUE; 
....................       got_id = FALSE; 
....................    } 
....................     
.................... } 
.................... */ 
....................  
....................  
....................  
....................  
.................... #int_TIMER1 
.................... void TIMER1_isr(void) 
.................... { 
....................   // option = readKeyboard(); 
.................... } 
....................  
*
0134:  BCF    0C.0
0135:  BCF    0A.3
0136:  BCF    0A.4
0137:  GOTO   031
.................... #int_RTCC 
.................... void RTCC_isr(void) 
.................... { 
....................  
....................  
....................    option = tc_tecla(1500); // ms 
*
014C:  MOVLW  DC
014D:  MOVWF  58
*
0273:  MOVF   78,W
0274:  MOVWF  34
....................        
0275:  BCF    0B.2
0276:  BCF    0A.3
0277:  BCF    0A.4
0278:  GOTO   031
.................... } 
....................  
.................... void main() 
*
0413:  MOVF   03,W
0414:  ANDLW  1F
0415:  MOVWF  03
0416:  CLRF   2D
0417:  CLRF   2E
0418:  CLRF   32
0419:  CLRF   33
041A:  MOVLW  FF
041B:  MOVWF  3F
041C:  BSF    03.5
041D:  BSF    1F.0
041E:  BSF    1F.1
041F:  BSF    1F.2
0420:  BCF    1F.3
0421:  MOVLW  07
0422:  MOVWF  1C
0423:  BCF    03.7
*
042C:  CLRF   4A
.................... { 
....................    //VARIAVEIS 
....................    byte result; 
....................    unsigned char tmp; 
....................    unsigned char tmp_result; 
....................     
....................    eeprom_address address = 0; 
....................  
....................    // unsigned char tmp_result; 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //13.1ms overflow 
042D:  BSF    03.5
042E:  MOVF   01,W
042F:  ANDLW  C0
0430:  IORLW  07
0431:  MOVWF  01
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); //Overflow in 104ms | Resolution 1.6 us 
0432:  MOVLW  B5
0433:  BCF    03.5
0434:  MOVWF  10
....................  
....................    init_ext_eeprom(); 
0435:  GOTO   287
....................  
....................    // enable_interrupts(INT_TIMER0); 
....................    enable_interrupts(INT_TIMER1); 
0436:  BSF    03.5
0437:  BSF    0C.0
....................  
....................    enable_interrupts(GLOBAL); 
0438:  MOVLW  C0
0439:  BCF    03.5
043A:  IORWF  0B,F
....................  
....................  
....................    lcd_ini(); 
043B:  GOTO   2DC
....................    delay_us(50); 
043C:  MOVLW  52
043D:  MOVWF  77
043E:  DECFSZ 77,F
043F:  GOTO   43E
0440:  GOTO   441
0441:  NOP
....................    printf(lcd_escreve, "\f  iniciando... "); 
0442:  MOVLW  79
0443:  BSF    03.6
0444:  MOVWF  0D
0445:  MOVLW  02
0446:  MOVWF  0F
0447:  BCF    03.6
0448:  GOTO   362
....................    delay_ms(500); 
0449:  MOVLW  02
044A:  MOVWF  4B
044B:  CLRF   2B
044C:  BTFSC  0B.7
044D:  BSF    2B.7
044E:  BCF    0B.7
044F:  MOVLW  FA
0450:  MOVWF  5B
0451:  CALL   138
0452:  BTFSC  2B.7
0453:  BSF    0B.7
0454:  DECFSZ 4B,F
0455:  GOTO   44B
0456:  CLRF   2B
0457:  BTFSC  0B.7
0458:  BSF    2B.7
0459:  BCF    0B.7
....................  
....................    // printf(lcd_escreve, "\fIFMT - Serial"); 
....................    // delay_ms(50); 
....................  
....................    // int size = BLOCK_SIZE; 
....................    // printf(lcd_escreve, "\fBlock_Size:%u", size); 
....................    // delay_ms(500); 
....................  
....................    // resetMemory(); 
....................     
....................    // data_avail = FALSE; 
....................    // int pass [4] = {1,2,3,4}; 
....................    // int id [2] = {12,12}; 
....................    // saveUser(id, pass, 1); 
....................    // int id1 [2] = {14,0}; 
....................    // saveuser(id1, pass, 0); 
....................    // int id2 [2] = {5,5}; 
....................    // saveuser(id2, pass, 1); 
....................    // int id3 [2] = {70,00}; 
....................    // saveuser(id3, pass, 1); 
....................    // int id4 [2] = {254,254}; 
....................    // saveuser(id4, pass, 3);//admin 
....................    // adminMenu(); 
....................     
....................    //// listAdmins(); 
....................   
....................     
....................     
....................    // isIdAvailable(254); 
....................    // isIdAvailable(200); 
....................  
....................   
....................   // address_data_delete = getAddressByID(6); 
....................   // printf(lcd_escreve, "\f Address ID = %d", address_data_delete); 
....................  //  deleteBlock(address_data_delete); 
....................    delay_ms(50); 
045A:  MOVLW  32
045B:  MOVWF  5B
045C:  CALL   138
045D:  BTFSC  2B.7
045E:  BSF    0B.7
....................    // printUser(); 
....................    delay_ms(1000); 
045F:  MOVLW  04
0460:  MOVWF  4B
0461:  CLRF   2B
0462:  BTFSC  0B.7
0463:  BSF    2B.7
0464:  BCF    0B.7
0465:  MOVLW  FA
0466:  MOVWF  5B
0467:  CALL   138
0468:  BTFSC  2B.7
0469:  BSF    0B.7
046A:  DECFSZ 4B,F
046B:  GOTO   461
....................     
....................    while(TRUE) 
....................    { 
....................  
....................       printf(lcd_escreve, "\f op:%c ", option); 
046C:  MOVLW  82
046D:  BSF    03.6
046E:  MOVWF  0D
046F:  MOVLW  02
0470:  MOVWF  0F
0471:  BCF    03.0
0472:  MOVLW  05
0473:  BCF    03.6
0474:  MOVWF  4B
0475:  GOTO   3BA
0476:  MOVF   34,W
0477:  MOVWF  4F
0478:  CALL   325
0479:  MOVLW  20
047A:  MOVWF  4F
047B:  CALL   325
....................       delay_ms(500); 
047C:  MOVLW  02
047D:  MOVWF  4B
047E:  CLRF   2B
047F:  BTFSC  0B.7
0480:  BSF    2B.7
0481:  BCF    0B.7
0482:  MOVLW  FA
0483:  MOVWF  5B
0484:  CALL   138
0485:  BTFSC  2B.7
0486:  BSF    0B.7
0487:  DECFSZ 4B,F
0488:  GOTO   47E
0489:  GOTO   46C
....................  
....................     
....................    } 
....................  
.................... } 
....................  
048A:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
