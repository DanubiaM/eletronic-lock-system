#include "functions.h"

#ifndef lcd_enable 
   #define lcd_enable     pin_e1
   #define lcd_rs         pin_e2
   //#define lcd_rw       pin_e2  
   #define lcd_d4         pin_d4
   #define lcd_d5         pin_d5
   #define lcd_d6         pin_d6
   #define lcd_d7         pin_d7
#endif


typedef struct { 
   int id[2];
   int pass[4]; //password
   int status; //0 - Unpaid, 1 - Paid, 3 - Admin
}User;

#define RX_BUFFER_SIZE 10
#define BLOCK_SIZE sizeof(User) 
/*
int incrementID(){
   int greatest_id = 0 ,address = 0;   
   
   erase_program_eeprom(0); 
   int id_temp = read_ext_eeprom(address);   

   while( id_temp  != -1){
      
      if(id_temp > greatest_id ){
         greatest_id = id_temp;
      }     
     
      address += BLOCK_SIZE;
      id_temp = read_ext_eeprom(address);
      
   }
  
   
   return ++greatest_id;
    
}
*/
void saveUser(int * id, int * pass, int status){

   if( id[0] < 256 && id[1] < 256 && getAddressByID(id) > -1 ){
      int address = lastNewUserPosition();
      //recebe os parâmetros do usuário
      User user;
      user.id[0] = id[0];
      user.id[1] = id[1];
      user.pass[0] = pass[0];
      user.pass[1] = pass[1];
      user.pass[2] = pass[2];
      user.pass[3] = pass[3];
      user.status = status;
      

      //Corrigir isso, o endereço tem que ser "dinâmico"
      
      write_ext_eeprom(address, user.id[0]);
      write_ext_eeprom(address+1, user.id[1]);
      write_ext_eeprom(address+2, user.pass[0]);
      write_ext_eeprom(address+3, user.pass[1]);
      write_ext_eeprom(address+4, user.pass[2]);
      write_ext_eeprom(address+5, user.pass[3]);       
      write_ext_eeprom(address+6, user.status);
   

      printf (lcd_escreve,"\fUsuario Cadastrado");
      delay_ms(500);

   }else{
      printf (lcd_escreve,"\fID incompativel");
      printf (lcd_escreve,"\r\nTente novamente");
      delay_ms(1000);

   }
}

void printUser(){
   //delay_ms(50);
   int tmp_result = read_ext_eeprom(0);  
   
   delay_ms(50);  
   
   printf (lcd_escreve,"\f Button: %d", tmp_result);
  // printf(lcd_escreve, "\r\nPw:%d%d%d%d St:%d %d", read_ext_eeprom(1), read_ext_eeprom(2), read_ext_eeprom(3), read_ext_eeprom(4), read_ext_eeprom(5), read_ext_eeprom(6));
   
   //printf(lcd_escreve, "\f Client () else´{}{}
   // printf(lcd_escreve, "\r\nPw:%c%c%c%c St:%c %c", U1.pass[0], U1.pass[1], U1.pass[2], U1.pass[3], U1.status, U1.type_usr);
}

int getAddressByID(int * id){
   int id_temp[2];
   int address = 0;
   
   while( read_ext_eeprom(address) != -1){
      id_temp[0] = read_ext_eeprom(address);
      id_temp[1] = read_ext_eeprom(address+1);
      
      if (id_temp[0] == id[0] && id_temp[1] == id[1]){
         printf (lcd_escreve,"\fID Encontrado:%u%u", id_temp[0],id_temp[1]);
         delay_ms(1000);
         return address;
      }

      address += BLOCK_SIZE; 
   }
   printf (lcd_escreve,"\f ID N Encontrado");
   return -1;
   
}

void erase_program_eeprom(int addrr){
   for(int i=0; i < BLOCK_SIZE; i++){
         write_ext_eeprom(addrr + i, -1);
   }  
   printf (lcd_escreve,"\f User erased ");
   delay_ms(500);
}

int deleteUser(int8 address){
   
   int data_temp;
   int previous_block = address;
   int next_block = address + BLOCK_SIZE;

   //Case 1: without next block
   if (read_ext_eeprom(next_block) == -1){
      erase_program_eeprom(previous_block);      
      return 1;
   }

   //Case 2: Check whether the data in the address is empty
   while(read_ext_eeprom(next_block) != -1){
      //data_temp[index] = read_ext_eeprom(address);
      for(int i=0; i < BLOCK_SIZE; i++){
         data_temp = read_ext_eeprom(next_block + i);           
         write_ext_eeprom(previous_block + i, data_temp);    //overwrite delete block
      }  

      previous_block = next_block;
      next_block += BLOCK_SIZE;
   }
   
   next_block -= BLOCK_SIZE;
   
   //Erase last block  
   erase_program_eeprom(next_block);
   
   return 1;

}

int lastNewUserPosition(){
   int address = 0;
   int id_temp;

   while( read_ext_eeprom(address) != -1){
      address += BLOCK_SIZE; 
   }
   printf (lcd_escreve,"\fAddress: %d", address);
   delay_ms(1000);
   
   return address;

}

int isIdAvailable(int id){
   unsigned int address = 0;
   int id_temp;
   while( read_ext_eeprom(address) != -1){
      id_temp = read_ext_eeprom(address);
      if (id_temp == id){
          printf (lcd_escreve,"\fID:%u, Existe", id_temp);
          delay_ms(1000);
         return 0;//Sucessful
      }

      address += BLOCK_SIZE; 
   }
   printf (lcd_escreve,"\fID:%u, N Existe", id_temp);
   delay_ms(1000);
   return -1;
}

void resetMemory(){
   int address = 0;
   for(; read_ext_eeprom(address) != -1;
    erase_program_eeprom(address), address += BLOCK_SIZE);
}

// void adminMenu(){

  // unsigned char keyboard_buffer[BLOCK_SIZE];

  // do{
  //    printf(lcd_escreve,"\f1: CAD Cliente ");
  //    delay_ms(500);
  //    printf(lcd_escreve,"\r\n2: DEL Cliente");
  //    delay_ms(500);
  //    printf(lcd_escreve,"\f3: Buscar Cliente ");
  //    delay_ms(500);
  //    printf(lcd_escreve,"\r\n4: Editar Cliente");
  //    delay_ms(500);
  //    printf(lcd_escreve,"\f5: SAIR do Menu ");
  //    delay_ms(500);

  //    printf(lcd_escreve,"\f Button: %c", option);
  //    delay_ms(1000);


   //  switch(option){
   //     case 1:
  //        int pass [4] ={1,2,3,4};
  //        int id [2] = {12,12};
  //          int i = 0;
  //          while( option != '#' ){
  //              printf(lcd_escreve,"\fDigite o ID");
  //              delay_ms(500);
  //              if(option != '255'){
  //                printf(lcd_escreve,"\foption: %u", option);
  //                delay_ms(500);
  //                keyboard_buffer += option;
  //              }
  //          }

  //          saveUser();
   //          break;
   //     case 2:
   //          listar();
   //          break;
   //     case 3:
   //          mostrarMes();
   //          break;
   //     case 4:
   //           printf("\nTENHA UM BOM DIA\n");
   //          break;
   //     default:
   //          printf("\nDIGITE UM VALOR VÁLIDO\n");
   //          break;

   //    }
   // }while(opc != 4);//só termina quando for 4 
   
 

   
// }

unsigned char readKeyboard(){
   unsigned char tmp;
   unsigned char tmp_result;

   tmp = tc_tecla(1500); // ms
   if(tmp != 255){
      write_ext_eeprom(0, tmp);
      delay_ms(50);
      tmp_result = read_ext_eeprom(0);
      delay_ms(50);
      // tmp_result = tmp;
      printf(lcd_escreve,"\f Button: %c", tmp_result);
   }else{ 
      printf(lcd_escreve,"\f   TECLADO  ");
   }
   return tmp;
}


int * getAdminsID(){

   int address = 0;
   int temp_status;
   int index= 0;
   static int admins[BLOCK_SIZE];
   admins[0] = -1;
   while( read_ext_eeprom(address) != -1){
      temp_status = read_ext_eeprom(address + (BLOCK_SIZE - 1));//status of the user
      if (temp_status == 3){
         printf (lcd_escreve,"\fAdmin Encontrado");
         delay_ms(1000);
         for(int i=0; i < 2; i++){
            int id = read_ext_eeprom(address+i);   
            admins[index] = id;
            index++;
         }

      }

      address += BLOCK_SIZE; 
   }

   return admins;

}

void listAdmins(){
   int * admins;

   admins = getAdminsID();
   if(admins[0] > -1){
      for (int16 i=0; i < sizeof(admins); i+=2){
         printf(lcd_escreve, "\fid:%u%u",admins[i], admins[i+1]);
         delay_ms(1000);
      } 
   }
}

