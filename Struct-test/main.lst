CCS PCM C Compiler, Version 5.025, 7201               15-nov-21 21:32

               Filename:   C:\Users\danub\OneDrive\Área de Trabalho\git\eletronic-lock-system\Struct-test\main.lst

               ROM used:   1376 words (17%)
                           Largest free fragment is 2048
               RAM used:   54 (15%) at main() level
                           87 (24%) worst case
               Stack used: 6 locations (5 in main + 1 for interrupts)
               Stack size: 8

*
0000:  MOVLW  04
0001:  MOVWF  0A
0002:  GOTO   4F5
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  BTFSS  0B.5
0028:  GOTO   02B
0029:  BTFSC  0B.2
002A:  GOTO   052
002B:  MOVLW  8C
002C:  MOVWF  04
002D:  BTFSS  00.0
002E:  GOTO   031
002F:  BTFSC  0C.0
0030:  GOTO   055
0031:  MOVF   22,W
0032:  MOVWF  04
0033:  MOVF   23,W
0034:  MOVWF  77
0035:  MOVF   24,W
0036:  MOVWF  78
0037:  MOVF   25,W
0038:  MOVWF  79
0039:  MOVF   26,W
003A:  MOVWF  7A
003B:  MOVF   27,W
003C:  BSF    03.6
003D:  MOVWF  0D
003E:  BCF    03.6
003F:  MOVF   28,W
0040:  BSF    03.6
0041:  MOVWF  0F
0042:  BCF    03.6
0043:  MOVF   29,W
0044:  BSF    03.6
0045:  MOVWF  0C
0046:  BCF    03.6
0047:  MOVF   2A,W
0048:  BSF    03.6
0049:  MOVWF  0E
004A:  BCF    03.6
004B:  MOVF   20,W
004C:  MOVWF  0A
004D:  SWAPF  21,W
004E:  MOVWF  03
004F:  SWAPF  7F,F
0050:  SWAPF  7F,W
0051:  RETFIE
0052:  BCF    0A.3
0053:  BCF    0A.4
0054:  GOTO   064
0055:  BCF    0A.3
0056:  BCF    0A.4
0057:  GOTO   060
.................... //#include <40_save_client.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
0058:  BCF    0A.0
0059:  BCF    0A.1
005A:  BCF    0A.2
005B:  ADDWF  02,F
005C:  RETLW  28
005D:  RETLW  0F
005E:  RETLW  01
005F:  RETLW  06
*
0068:  DATA 0C,10
0069:  DATA A0,34
006A:  DATA EE,34
006B:  DATA E3,34
006C:  DATA 61,37
006D:  DATA E4,37
006E:  DATA 2E,17
006F:  DATA 2E,10
0070:  DATA 00,00
0071:  DATA 8C,24
0072:  DATA C6,26
0073:  DATA 54,10
0074:  DATA 2D,10
0075:  DATA D3,32
0076:  DATA F2,34
0077:  DATA 61,36
0078:  DATA 00,00
0079:  DATA 8C,2A
007A:  DATA F3,3A
007B:  DATA 61,39
007C:  DATA E9,37
007D:  DATA A0,21
007E:  DATA 61,32
007F:  DATA E1,39
0080:  DATA 74,39
0081:  DATA 61,32
0082:  DATA 6F,00
0083:  DATA 8C,24
0084:  DATA 44,10
0085:  DATA 69,37
0086:  DATA E3,37
0087:  DATA 6D,38
0088:  DATA 61,3A
0089:  DATA 69,3B
008A:  DATA 65,36
008B:  DATA 00,01
008C:  DATA 0D,05
008D:  DATA D4,32
008E:  DATA 6E,3A
008F:  DATA 65,10
0090:  DATA EE,37
0091:  DATA F6,30
0092:  DATA ED,32
0093:  DATA 6E,3A
0094:  DATA 65,00
0095:  DATA 0C,10
0096:  DATA C2,3A
0097:  DATA 74,3A
0098:  DATA 6F,37
0099:  DATA 3A,10
009A:  DATA 25,32
009B:  DATA 00,00
009C:  DATA 0D,05
009D:  DATA D0,3B
009E:  DATA BA,12
009F:  DATA E4,12
00A0:  DATA E4,12
00A1:  DATA E4,12
00A2:  DATA 64,10
00A3:  DATA 53,3A
00A4:  DATA BA,12
00A5:  DATA 64,10
00A6:  DATA 25,32
00A7:  DATA 00,00
00A8:  DATA 8C,24
00A9:  DATA 44,10
00AA:  DATA 45,37
00AB:  DATA E3,37
00AC:  DATA 6E,3A
00AD:  DATA F2,30
00AE:  DATA E4,37
00AF:  DATA BA,12
00B0:  DATA 64,00
00B1:  DATA 0C,10
00B2:  DATA 49,22
00B3:  DATA 20,27
00B4:  DATA A0,22
00B5:  DATA EE,31
00B6:  DATA 6F,37
00B7:  DATA 74,39
00B8:  DATA 61,32
00B9:  DATA 6F,00
00BA:  DATA 0C,10
00BB:  DATA D5,39
00BC:  DATA 65,39
00BD:  DATA A0,32
00BE:  DATA F2,30
00BF:  DATA F3,32
00C0:  DATA 64,10
00C1:  DATA 00,00
*
0198:  MOVF   0B,W
0199:  MOVWF  63
019A:  BCF    0B.7
019B:  BSF    03.5
019C:  BSF    03.6
019D:  BSF    0C.7
019E:  BSF    0C.0
019F:  NOP
01A0:  NOP
01A1:  BCF    03.5
01A2:  BCF    03.6
01A3:  BTFSC  63.7
01A4:  BSF    0B.7
01A5:  BSF    03.6
01A6:  MOVF   0C,W
01A7:  ANDLW  7F
01A8:  BTFSC  03.2
01A9:  GOTO   1EC
01AA:  BCF    03.6
01AB:  MOVWF  63
01AC:  BSF    03.6
01AD:  MOVF   0D,W
01AE:  BCF    03.6
01AF:  MOVWF  64
01B0:  BSF    03.6
01B1:  MOVF   0F,W
01B2:  BCF    03.6
01B3:  MOVWF  65
01B4:  MOVF   63,W
01B5:  MOVWF  69
01B6:  CALL   161
01B7:  MOVF   64,W
01B8:  BSF    03.6
01B9:  MOVWF  0D
01BA:  BCF    03.6
01BB:  MOVF   65,W
01BC:  BSF    03.6
01BD:  MOVWF  0F
01BE:  BCF    03.6
01BF:  MOVF   0B,W
01C0:  MOVWF  66
01C1:  BCF    0B.7
01C2:  BSF    03.5
01C3:  BSF    03.6
01C4:  BSF    0C.7
01C5:  BSF    0C.0
01C6:  NOP
01C7:  NOP
01C8:  BCF    03.5
01C9:  BCF    03.6
01CA:  BTFSC  66.7
01CB:  BSF    0B.7
01CC:  BSF    03.6
01CD:  RLF    0C,W
01CE:  RLF    0E,W
01CF:  ANDLW  7F
01D0:  BTFSC  03.2
01D1:  GOTO   1EC
01D2:  BCF    03.6
01D3:  MOVWF  63
01D4:  BSF    03.6
01D5:  MOVF   0D,W
01D6:  BCF    03.6
01D7:  MOVWF  64
01D8:  BSF    03.6
01D9:  MOVF   0F,W
01DA:  BCF    03.6
01DB:  MOVWF  65
01DC:  MOVF   63,W
01DD:  MOVWF  69
01DE:  CALL   161
01DF:  MOVF   64,W
01E0:  BSF    03.6
01E1:  MOVWF  0D
01E2:  BCF    03.6
01E3:  MOVF   65,W
01E4:  BSF    03.6
01E5:  MOVWF  0F
01E6:  INCF   0D,F
01E7:  BTFSC  03.2
01E8:  INCF   0F,F
01E9:  BCF    03.6
01EA:  GOTO   198
01EB:  BSF    03.6
01EC:  BCF    03.6
01ED:  RETURN
*
035C:  MOVF   6A,W
035D:  CLRF   78
035E:  SUBWF  69,W
035F:  BTFSC  03.0
0360:  GOTO   364
0361:  MOVF   69,W
0362:  MOVWF  77
0363:  GOTO   370
0364:  CLRF   77
0365:  MOVLW  08
0366:  MOVWF  6B
0367:  RLF    69,F
0368:  RLF    77,F
0369:  MOVF   6A,W
036A:  SUBWF  77,W
036B:  BTFSC  03.0
036C:  MOVWF  77
036D:  RLF    78,F
036E:  DECFSZ 6B,F
036F:  GOTO   367
0370:  RETURN
*
03D9:  MOVF   0B,W
03DA:  MOVWF  64
03DB:  BCF    0B.7
03DC:  BSF    03.5
03DD:  BSF    03.6
03DE:  BSF    0C.7
03DF:  BSF    0C.0
03E0:  NOP
03E1:  NOP
03E2:  BCF    03.5
03E3:  BCF    03.6
03E4:  BTFSC  64.7
03E5:  BSF    0B.7
03E6:  BTFSC  03.0
03E7:  GOTO   410
03E8:  BSF    03.6
03E9:  MOVF   0C,W
03EA:  ANDLW  7F
03EB:  BCF    03.6
03EC:  MOVWF  64
03ED:  BSF    03.6
03EE:  MOVF   0D,W
03EF:  BCF    03.6
03F0:  MOVWF  65
03F1:  BSF    03.6
03F2:  MOVF   0F,W
03F3:  BCF    03.6
03F4:  MOVWF  66
03F5:  MOVF   64,W
03F6:  MOVWF  69
03F7:  CALL   161
03F8:  MOVF   65,W
03F9:  BSF    03.6
03FA:  MOVWF  0D
03FB:  BCF    03.6
03FC:  MOVF   66,W
03FD:  BSF    03.6
03FE:  MOVWF  0F
03FF:  BCF    03.6
0400:  MOVF   0B,W
0401:  MOVWF  67
0402:  BCF    0B.7
0403:  BSF    03.5
0404:  BSF    03.6
0405:  BSF    0C.7
0406:  BSF    0C.0
0407:  NOP
0408:  NOP
0409:  BCF    03.5
040A:  BCF    03.6
040B:  BTFSC  67.7
040C:  BSF    0B.7
040D:  DECFSZ 63,F
040E:  GOTO   410
040F:  GOTO   42F
0410:  BSF    03.6
0411:  RLF    0C,W
0412:  RLF    0E,W
0413:  ANDLW  7F
0414:  BCF    03.6
0415:  MOVWF  64
0416:  BSF    03.6
0417:  MOVF   0D,W
0418:  BCF    03.6
0419:  MOVWF  65
041A:  BSF    03.6
041B:  MOVF   0F,W
041C:  BCF    03.6
041D:  MOVWF  66
041E:  MOVF   64,W
041F:  MOVWF  69
0420:  CALL   161
0421:  MOVF   65,W
0422:  BSF    03.6
0423:  MOVWF  0D
0424:  BCF    03.6
0425:  MOVF   66,W
0426:  BSF    03.6
0427:  MOVWF  0F
0428:  INCF   0D,F
0429:  BTFSC  03.2
042A:  INCF   0F,F
042B:  BCF    03.0
042C:  BCF    03.6
042D:  DECFSZ 63,F
042E:  GOTO   3D9
*
0433:  MOVLW  20
0434:  BTFSS  64.4
0435:  MOVLW  30
0436:  MOVWF  65
0437:  MOVF   63,W
0438:  MOVWF  77
0439:  BTFSS  63.7
043A:  GOTO   443
043B:  COMF   77,F
043C:  INCF   77,F
043D:  MOVF   77,W
043E:  MOVWF  63
043F:  MOVLW  2D
0440:  MOVWF  65
0441:  BSF    64.7
0442:  BSF    64.0
0443:  MOVF   63,W
0444:  MOVWF  69
0445:  MOVLW  64
0446:  MOVWF  6A
0447:  CALL   35C
0448:  MOVF   77,W
0449:  MOVWF  63
044A:  MOVLW  30
044B:  ADDWF  78,W
044C:  MOVWF  66
044D:  MOVF   63,W
044E:  MOVWF  69
044F:  MOVLW  0A
0450:  MOVWF  6A
0451:  CALL   35C
0452:  MOVLW  30
0453:  ADDWF  77,W
0454:  MOVWF  68
0455:  MOVLW  30
0456:  ADDWF  78,W
0457:  MOVWF  67
0458:  MOVF   65,W
0459:  MOVWF  77
045A:  MOVLW  30
045B:  SUBWF  66,W
045C:  BTFSC  03.2
045D:  GOTO   462
045E:  BSF    64.1
045F:  BTFSC  64.7
0460:  BSF    64.2
0461:  GOTO   476
0462:  MOVF   65,W
0463:  MOVWF  66
0464:  MOVLW  20
0465:  MOVWF  65
0466:  MOVLW  30
0467:  SUBWF  67,W
0468:  BTFSC  03.2
0469:  GOTO   46E
046A:  BSF    64.0
046B:  BTFSC  64.7
046C:  BSF    64.1
046D:  GOTO   476
046E:  BTFSS  03.2
046F:  BSF    64.0
0470:  BTFSS  03.2
0471:  GOTO   476
0472:  MOVF   66,W
0473:  MOVWF  67
0474:  MOVLW  20
0475:  MOVWF  66
0476:  BTFSC  64.2
0477:  GOTO   47D
0478:  BTFSC  64.1
0479:  GOTO   480
047A:  BTFSC  64.0
047B:  GOTO   483
047C:  GOTO   486
047D:  MOVF   65,W
047E:  MOVWF  69
047F:  CALL   161
0480:  MOVF   66,W
0481:  MOVWF  69
0482:  CALL   161
0483:  MOVF   67,W
0484:  MOVWF  69
0485:  CALL   161
0486:  MOVF   68,W
0487:  MOVWF  69
0488:  CALL   161
....................  
.................... #list 
....................  
.................... #device ADC=8 
....................  
.................... #FUSES NOWDT                    //No Watch Dog Timer 
.................... #FUSES NOBROWNOUT               //No brownout reset 
.................... #FUSES NOLVP                    //No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
.................... #FUSES HS  
....................  
.................... #use delay(crystal=20000000) 
*
00C2:  MOVLW  6A
00C3:  MOVWF  04
00C4:  BCF    03.7
00C5:  MOVF   00,W
00C6:  BTFSC  03.2
00C7:  GOTO   0D5
00C8:  MOVLW  06
00C9:  MOVWF  78
00CA:  CLRF   77
00CB:  DECFSZ 77,F
00CC:  GOTO   0CB
00CD:  DECFSZ 78,F
00CE:  GOTO   0CA
00CF:  MOVLW  7B
00D0:  MOVWF  77
00D1:  DECFSZ 77,F
00D2:  GOTO   0D1
00D3:  DECFSZ 00,F
00D4:  GOTO   0C8
00D5:  RETURN
.................... //#use rs232(baud=9600,parity=N,xmit=PIN_C6,rcv=PIN_C7,bits=8,stream=PORT1) 
....................  
.................... // -------Variables' Declaration 
.................... unsigned char tmp; 
.................... unsigned char tmp_result; 
.................... signed int8 address_data_delete; 
....................  
.................... typedef struct { //7Bytes 
....................    int id; 
....................    int pass[4]; //password 
....................    int status; 
....................    int type_usr; 
.................... }User; 
....................  
.................... #define RX_BUFFER_SIZE 10 
.................... #define BLOCK_SIZE 7 
.................... int8 rx_wr_index = 0; 
.................... int8 lock_pos = 0, rxd, read, valid_data_count; 
.................... unsigned int8 rx_buffer[RX_BUFFER_SIZE]; 
.................... int data_avail = FALSE, got_id = FALSE; 
....................  
.................... User U1; 
.................... User U2; 
.................... // ------- 
....................  
....................  
.................... // -----------------Functions 
.................... void saveUser(int id, int * pass, int status, int type_usr); 
.................... void printUser(); 
.................... int getAddressByID(int id);     
.................... int deleteBlock(int address); 
.................... void erase_program_eeprom(int addrr); 
.................... int incrementID(); 
.................... // ---------------- 
.................... /* 
.................... // ---- MSG from serial communication 
.................... #int_RDA 
.................... void RDA_isr(void){ 
....................    rx_buffer[rx_wr_index] = getc(); 
....................    rxd = rx_buffer[rx_wr_index]; 
....................    rx_wr_index++; 
....................  
....................    if(rx_wr_index > RX_BUFFER_SIZE){ 
....................       rx_wr_index = 0; 
....................    } 
....................  
....................    //Look for unique ID: "IFMT" 
....................    if(rxd == 'I' && lock_pos == 0){ 
....................       lock_pos++; 
....................    } 
....................    else if(rxd == 'F' && lock_pos == 1){ 
....................       lock_pos++; 
....................    } 
....................    else if(rxd == 'M' && lock_pos == 2){ 
....................       lock_pos++; 
....................    } 
....................    else if(rxd == 'T' && lock_pos == 3){ 
....................       lock_pos=0; //Reset the "combination lock" 
....................       got_id = TRUE; 
....................       read = rxd; 
....................       //get ready to count the number of data bytes 
....................       valid_data_count = 0xff;  
....................  
....................       //buffer is reset to index 0 
....................       rx_wr_index = 0; 
....................    }else { 
....................       lock_pos = 0; 
....................    } 
....................  
....................    if(got_id && ++valid_data_count >= 6){ 
....................       data_avail = TRUE; 
....................       got_id = FALSE; 
....................    } 
....................     
.................... } 
.................... */ 
....................  
.................... //Define the default pins before calling the LCD driver 
.................... #ifndef lcd_enable  
....................    #define lcd_enable     pin_e1 
....................    #define lcd_rs         pin_e2 
....................    //#define lcd_rw       pin_e2   
....................    #define lcd_d4         pin_d4 
....................    #define lcd_d5         pin_d5 
....................    #define lcd_d6         pin_d6 
....................    #define lcd_d7         pin_d7 
.................... #endif 
....................  
.................... #include "mod_lcd.c" 
.................... /************************************************************************/ 
.................... /*  MOD_LCD.C - Biblioteca de manipulação de módulo LCD                 */ 
.................... /*                                                                      */ 
.................... /*  Autor: Fábio Pereira                                                */ 
.................... /*                                                                      */ 
.................... /************************************************************************/ 
....................  
.................... // As definições a seguir são utilizadas para acesso aos pinos do display 
.................... // caso o pino RW não seja utilizado, comente a definição lcd_rw 
.................... #ifndef lcd_enable 
.................... 	#define lcd_enable 		pin_e1		// pino enable do LCD 
.................... 	#define lcd_rs			pin_e0		// pino rs do LCD 
.................... 	//#define lcd_rw		pin_e2		// pino rw do LCD 
.................... 	#define lcd_d4			pin_d4		// pino de dados d4 do LCD 
.................... 	#define lcd_d5			pin_d5		// pino de dados d5 do LCD 
.................... 	#define lcd_d6			pin_d6		// pino de dados d6 do LCD 
.................... 	#define lcd_d7			pin_d7		// pino de dados d7 do LCD 
.................... #endif 
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 linhas 
.................... #define lcd_seg_lin 0x40    // Endereço da segunda linha na RAM do LCD 
....................  
.................... // a constante abaixo define a seqüência de inicialização do módulo LCD 
.................... byte CONST INI_LCD[4] = {0x20 | (lcd_type << 2), 0xf, 1, 6}; 
....................  
.................... byte lcd_le_byte() 
.................... // lê um byte do LCD (somente com pino RW) 
.................... { 
.................... 	byte dado; 
.................... 	// configura os pinos de dados como entradas 
.................... 	input(lcd_d4); 
.................... 	input(lcd_d5); 
.................... 	input(lcd_d6); 
.................... 	input(lcd_d7); 
.................... 	// se o pino rw for utilizado, coloca em 1 
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
....................    output_high(lcd_enable); // habilita display 
.................... 	dado = 0;	// zera a variável de leitura 
.................... 	// lê os quatro bits mais significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,7); 
.................... 	if (input(lcd_d6)) bit_set(dado,6); 
.................... 	if (input(lcd_d5)) bit_set(dado,5); 
.................... 	if (input(lcd_d4)) bit_set(dado,4); 
.................... 	// dá um pulso na linha enable 
.................... 	output_low(lcd_enable); 
.................... 	output_high(lcd_enable); 
.................... 	// lê os quatro bits menos significativos 
.................... 	if (input(lcd_d7)) bit_set(dado,3); 
.................... 	if (input(lcd_d6)) bit_set(dado,2); 
.................... 	if (input(lcd_d5)) bit_set(dado,1); 
.................... 	if (input(lcd_d4)) bit_set(dado,0); 
.................... 	output_low(lcd_enable);	// desabilita o display 
.................... 	return dado;	// retorna o byte lido 
.................... } 
....................  
.................... void lcd_envia_nibble( byte dado ) 
.................... // envia um dado de quatro bits para o display 
.................... { 
.................... 	// coloca os quatro bits nas saidas 
.................... 	output_bit(lcd_d4,bit_test(dado,0)); 
00D6:  BTFSC  71.0
00D7:  GOTO   0DA
00D8:  BCF    08.4
00D9:  GOTO   0DB
00DA:  BSF    08.4
00DB:  BSF    03.5
00DC:  BCF    08.4
.................... 	output_bit(lcd_d5,bit_test(dado,1)); 
00DD:  BTFSC  71.1
00DE:  GOTO   0E3
00DF:  BCF    03.5
00E0:  BCF    08.5
00E1:  GOTO   0E5
00E2:  BSF    03.5
00E3:  BCF    03.5
00E4:  BSF    08.5
00E5:  BSF    03.5
00E6:  BCF    08.5
.................... 	output_bit(lcd_d6,bit_test(dado,2)); 
00E7:  BTFSC  71.2
00E8:  GOTO   0ED
00E9:  BCF    03.5
00EA:  BCF    08.6
00EB:  GOTO   0EF
00EC:  BSF    03.5
00ED:  BCF    03.5
00EE:  BSF    08.6
00EF:  BSF    03.5
00F0:  BCF    08.6
.................... 	output_bit(lcd_d7,bit_test(dado,3)); 
00F1:  BTFSC  71.3
00F2:  GOTO   0F7
00F3:  BCF    03.5
00F4:  BCF    08.7
00F5:  GOTO   0F9
00F6:  BSF    03.5
00F7:  BCF    03.5
00F8:  BSF    08.7
00F9:  BSF    03.5
00FA:  BCF    08.7
.................... 	// dá um pulso na linha enable 
.................... 	output_high(lcd_enable); 
00FB:  BCF    09.1
00FC:  BCF    03.5
00FD:  BSF    09.1
.................... 	output_low(lcd_enable); 
00FE:  BSF    03.5
00FF:  BCF    09.1
0100:  BCF    03.5
0101:  BCF    09.1
0102:  RETURN
.................... } 
....................  
....................  
.................... void lcd_envia_byte( boolean endereco, byte dado ) 
.................... { 
.................... 	// coloca a linha rs em 0 
.................... 	output_low(lcd_rs); 
0103:  BSF    03.5
0104:  BCF    09.2
0105:  BCF    03.5
0106:  BCF    09.2
.................... 	// aguarda o display ficar desocupado 
.................... 	//while ( bit_test(lcd_le_byte(),7) ) ; 
.................... 	// configura a linha rs dependendo do modo selecionado 
.................... 	output_bit(lcd_rs,endereco); 
0107:  MOVF   6E,F
0108:  BTFSS  03.2
0109:  GOTO   10C
010A:  BCF    09.2
010B:  GOTO   10D
010C:  BSF    09.2
010D:  BSF    03.5
010E:  BCF    09.2
.................... 	delay_us(100);	// aguarda 100 us 
010F:  MOVLW  A6
0110:  MOVWF  77
0111:  DECFSZ 77,F
0112:  GOTO   111
0113:  NOP
.................... 	// caso a linha rw esteja definida, coloca em 0 
.................... 	#ifdef lcd_rw 
.................... 		output_low(lcd_rw); 
.................... 	#endif 
.................... 	// desativa linha enable 
.................... 	output_low(lcd_enable); 
0114:  BCF    09.1
0115:  BCF    03.5
0116:  BCF    09.1
.................... 	// envia a primeira parte do byte 
.................... 	lcd_envia_nibble(dado >> 4); 
0117:  SWAPF  6F,W
0118:  MOVWF  70
0119:  MOVLW  0F
011A:  ANDWF  70,F
011B:  MOVF   70,W
011C:  MOVWF  71
011D:  CALL   0D6
.................... 	// envia a segunda parte do byte 
.................... 	lcd_envia_nibble(dado & 0x0f); 
011E:  MOVF   6F,W
011F:  ANDLW  0F
0120:  MOVWF  70
0121:  MOVWF  71
0122:  CALL   0D6
0123:  RETURN
.................... } 
....................  
....................  
.................... void lcd_ini() 
.................... // rotina de inicialização do display 
.................... { 
.................... 	byte conta; 
.................... 	output_low(lcd_d4); 
0124:  BSF    03.5
0125:  BCF    08.4
0126:  BCF    03.5
0127:  BCF    08.4
.................... 	output_low(lcd_d5); 
0128:  BSF    03.5
0129:  BCF    08.5
012A:  BCF    03.5
012B:  BCF    08.5
.................... 	output_low(lcd_d6); 
012C:  BSF    03.5
012D:  BCF    08.6
012E:  BCF    03.5
012F:  BCF    08.6
.................... 	output_low(lcd_d7); 
0130:  BSF    03.5
0131:  BCF    08.7
0132:  BCF    03.5
0133:  BCF    08.7
.................... 	output_low(lcd_rs); 
0134:  BSF    03.5
0135:  BCF    09.2
0136:  BCF    03.5
0137:  BCF    09.2
.................... 	#ifdef lcd_rw 
.................... 		output_high(lcd_rw); 
.................... 	#endif 
.................... 	output_low(lcd_enable); 
0138:  BSF    03.5
0139:  BCF    09.1
013A:  BCF    03.5
013B:  BCF    09.1
.................... 	delay_ms(15); 
013C:  MOVLW  0F
013D:  MOVWF  6A
013E:  CALL   0C2
.................... 	// envia uma seqüência de 3 vezes 0x03 
.................... 	// e depois 0x02 para configurar o módulo 
.................... 	// para modo de 4 bits 
.................... 	for(conta=1;conta<=3;++conta) 
013F:  MOVLW  01
0140:  MOVWF  54
0141:  MOVF   54,W
0142:  SUBLW  03
0143:  BTFSS  03.0
0144:  GOTO   14D
.................... 	{ 
.................... 		lcd_envia_nibble(3); 
0145:  MOVLW  03
0146:  MOVWF  71
0147:  CALL   0D6
.................... 		delay_ms(5); 
0148:  MOVLW  05
0149:  MOVWF  6A
014A:  CALL   0C2
014B:  INCF   54,F
014C:  GOTO   141
.................... 	} 
.................... 	lcd_envia_nibble(2); 
014D:  MOVLW  02
014E:  MOVWF  71
014F:  CALL   0D6
.................... 	// envia string de inicialização do display 
.................... 	for(conta=0;conta<=3;++conta) lcd_envia_byte(0,INI_LCD[conta]); 
0150:  CLRF   54
0151:  MOVF   54,W
0152:  SUBLW  03
0153:  BTFSS  03.0
0154:  GOTO   15E
0155:  MOVF   54,W
0156:  CALL   058
0157:  MOVWF  55
0158:  CLRF   6E
0159:  MOVF   55,W
015A:  MOVWF  6F
015B:  CALL   103
015C:  INCF   54,F
015D:  GOTO   151
015E:  BCF    0A.3
015F:  BCF    0A.4
0160:  GOTO   50E (RETURN)
.................... } 
....................  
.................... void lcd_pos_xy( byte x, byte y) 
.................... { 
....................    byte endereco; 
....................    if(y!=1) 
*
017B:  DECFSZ 6B,W
017C:  GOTO   17E
017D:  GOTO   181
....................    	endereco = lcd_seg_lin; 
017E:  MOVLW  40
017F:  MOVWF  6C
0180:  GOTO   182
....................    else 
....................    	endereco = 0; 
0181:  CLRF   6C
....................    endereco += x-1; 
0182:  MOVLW  01
0183:  SUBWF  6A,W
0184:  ADDWF  6C,F
....................    lcd_envia_byte(0,0x80|endereco); 
0185:  MOVF   6C,W
0186:  IORLW  80
0187:  MOVWF  6D
0188:  CLRF   6E
0189:  MOVF   6D,W
018A:  MOVWF  6F
018B:  CALL   103
.................... } 
....................  
.................... void lcd_escreve( char c) 
.................... // envia caractere para o display 
.................... { 
....................    switch (c) 
*
0161:  MOVF   69,W
0162:  XORLW  0C
0163:  BTFSC  03.2
0164:  GOTO   16F
0165:  XORLW  06
0166:  BTFSC  03.2
0167:  GOTO   177
0168:  XORLW  07
0169:  BTFSC  03.2
016A:  GOTO   177
016B:  XORLW  05
016C:  BTFSC  03.2
016D:  GOTO   18D
016E:  GOTO   192
.................... 	{ 
....................      case '\f' 	:	lcd_envia_byte(0,1); 
016F:  CLRF   6E
0170:  MOVLW  01
0171:  MOVWF  6F
0172:  CALL   103
.................... 	  			delay_ms(2); 
0173:  MOVLW  02
0174:  MOVWF  6A
0175:  CALL   0C2
.................... 				break; 
0176:  GOTO   197
....................      case '\n'	: 
.................... 	  case '\r' 	:	lcd_pos_xy(1,2); 
0177:  MOVLW  01
0178:  MOVWF  6A
0179:  MOVLW  02
017A:  MOVWF  6B
.................... 	  			break; 
*
018C:  GOTO   197
....................      case '\b' 	:	lcd_envia_byte(0,0x10); 
018D:  CLRF   6E
018E:  MOVLW  10
018F:  MOVWF  6F
0190:  CALL   103
.................... 	  			break; 
0191:  GOTO   197
....................      default	:	lcd_envia_byte(1,c); 
0192:  MOVLW  01
0193:  MOVWF  6E
0194:  MOVF   69,W
0195:  MOVWF  6F
0196:  CALL   103
.................... 	  			break; 
....................    } 
0197:  RETURN
.................... } 
....................  
.................... char lcd_le( byte x, byte y) 
.................... // le caractere do display 
.................... { 
.................... 	char valor; 
.................... 	// seleciona a posição do caractere 
.................... 	lcd_pos_xy(x,y); 
.................... 	// ativa rs 
.................... 	output_high(lcd_rs); 
.................... 	// lê o caractere 
.................... 	valor = lcd_le_byte(); 
.................... 	// desativa rs 
.................... 	output_low(lcd_rs); 
.................... 	// retorna o valor do caractere 
.................... 	return valor; 
.................... } 
....................  
....................  
.................... #include "2401.c" 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////   Library for a MicroChip 24LC01B configured for a x8 org         //// 
.................... ////                                                                   //// 
.................... ////   init_ext_eeprom();    Call before the other functions are used  //// 
.................... ////                                                                   //// 
.................... ////   write_ext_eeprom(a, d);  Write the byte d to the address a      //// 
.................... ////                                                                   //// 
.................... ////   d = read_ext_eeprom(a);  Read the byte d from the address a     //// 
.................... ////                                                                   //// 
.................... ////   b = ext_eeprom_ready();  Returns TRUE if the eeprom is ready    //// 
.................... ////                            to receive opcodes                     //// 
.................... ////                                                                   //// 
.................... ////   The main program may define EEPROM_SDA                          //// 
.................... ////   and EEPROM_SCL to override the defaults below.                  //// 
.................... ////                                                                   //// 
.................... ////                            Pin Layout                             //// 
.................... ////   -----------------------------------------------------------     //// 
.................... ////   |                                                         |     //// 
.................... ////   | 1: NC   Not Connected | 8: VCC   +5V                    |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 2: NC   Not Connected | 7: WP    GND                    |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 3: NC   Not Connected | 6: SCL   EEPROM_SCL and Pull-Up |     //// 
.................... ////   |                       |                                 |     //// 
.................... ////   | 4: VSS  GND           | 5: SDA   EEPROM_SDA and Pull-Up |     //// 
.................... ////   -----------------------------------------------------------     //// 
.................... ////                                                                   //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2003 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef EEPROM_SDA 
....................  
.................... #define EEPROM_SDA  PIN_C4 
.................... #define EEPROM_SCL  PIN_C3 
....................  
.................... #endif 
....................  
....................  
.................... #use i2c(master, sda=EEPROM_SDA, scl=EEPROM_SCL) 
*
01EE:  MOVLW  08
01EF:  MOVWF  78
01F0:  MOVLW  04
01F1:  MOVWF  77
01F2:  DECFSZ 77,F
01F3:  GOTO   1F2
01F4:  BCF    07.3
01F5:  BCF    4D.3
01F6:  MOVF   4D,W
01F7:  BSF    03.5
01F8:  MOVWF  07
01F9:  MOVLW  03
01FA:  MOVWF  77
01FB:  DECFSZ 77,F
01FC:  GOTO   1FB
01FD:  BCF    03.5
01FE:  RLF    66,F
01FF:  BCF    07.4
0200:  BTFSS  03.0
0201:  GOTO   208
0202:  BSF    4D.4
0203:  MOVF   4D,W
0204:  BSF    03.5
0205:  MOVWF  07
0206:  GOTO   20C
0207:  BCF    03.5
0208:  BCF    4D.4
0209:  MOVF   4D,W
020A:  BSF    03.5
020B:  MOVWF  07
020C:  NOP
020D:  BCF    03.5
020E:  BSF    4D.3
020F:  MOVF   4D,W
0210:  BSF    03.5
0211:  MOVWF  07
0212:  BCF    03.5
0213:  BTFSS  07.3
0214:  GOTO   213
0215:  DECFSZ 78,F
0216:  GOTO   1F0
0217:  MOVLW  04
0218:  MOVWF  77
0219:  DECFSZ 77,F
021A:  GOTO   219
021B:  BCF    07.3
021C:  BCF    4D.3
021D:  MOVF   4D,W
021E:  BSF    03.5
021F:  MOVWF  07
0220:  NOP
0221:  BCF    03.5
0222:  BSF    4D.4
0223:  MOVF   4D,W
0224:  BSF    03.5
0225:  MOVWF  07
0226:  MOVLW  03
0227:  MOVWF  77
0228:  DECFSZ 77,F
0229:  GOTO   228
022A:  MOVLW  03
022B:  MOVWF  77
022C:  DECFSZ 77,F
022D:  GOTO   22C
022E:  BCF    03.5
022F:  BSF    4D.3
0230:  MOVF   4D,W
0231:  BSF    03.5
0232:  MOVWF  07
0233:  BCF    03.5
0234:  BTFSS  07.3
0235:  GOTO   234
0236:  CLRF   78
0237:  MOVLW  03
0238:  MOVWF  77
0239:  DECFSZ 77,F
023A:  GOTO   239
023B:  BTFSC  07.4
023C:  BSF    78.0
023D:  BCF    07.3
023E:  BCF    4D.3
023F:  MOVF   4D,W
0240:  BSF    03.5
0241:  MOVWF  07
0242:  BCF    03.5
0243:  BCF    07.4
0244:  BCF    4D.4
0245:  MOVF   4D,W
0246:  BSF    03.5
0247:  MOVWF  07
0248:  BCF    03.5
0249:  RETURN
*
02E8:  MOVLW  08
02E9:  MOVWF  66
02EA:  MOVF   77,W
02EB:  MOVWF  67
02EC:  BSF    4D.4
02ED:  MOVF   4D,W
02EE:  BSF    03.5
02EF:  MOVWF  07
02F0:  MOVLW  03
02F1:  MOVWF  77
02F2:  DECFSZ 77,F
02F3:  GOTO   2F2
02F4:  BCF    03.5
02F5:  BSF    4D.3
02F6:  MOVF   4D,W
02F7:  BSF    03.5
02F8:  MOVWF  07
02F9:  BCF    03.5
02FA:  BTFSS  07.3
02FB:  GOTO   2FA
02FC:  BTFSC  07.4
02FD:  BSF    03.0
02FE:  BTFSS  07.4
02FF:  BCF    03.0
0300:  RLF    78,F
0301:  MOVLW  04
0302:  MOVWF  77
0303:  DECFSZ 77,F
0304:  GOTO   303
0305:  BCF    4D.3
0306:  MOVF   4D,W
0307:  BSF    03.5
0308:  MOVWF  07
0309:  BCF    03.5
030A:  BCF    07.3
030B:  DECFSZ 66,F
030C:  GOTO   2EC
030D:  BSF    4D.4
030E:  MOVF   4D,W
030F:  BSF    03.5
0310:  MOVWF  07
0311:  MOVLW  03
0312:  MOVWF  77
0313:  DECFSZ 77,F
0314:  GOTO   313
0315:  BCF    03.5
0316:  BCF    07.4
0317:  MOVF   67,W
0318:  BTFSC  03.2
0319:  GOTO   31F
031A:  BCF    4D.4
031B:  MOVF   4D,W
031C:  BSF    03.5
031D:  MOVWF  07
031E:  BCF    03.5
031F:  NOP
0320:  BSF    4D.3
0321:  MOVF   4D,W
0322:  BSF    03.5
0323:  MOVWF  07
0324:  BCF    03.5
0325:  BTFSS  07.3
0326:  GOTO   325
0327:  MOVLW  04
0328:  MOVWF  77
0329:  DECFSZ 77,F
032A:  GOTO   329
032B:  BCF    07.3
032C:  BCF    4D.3
032D:  MOVF   4D,W
032E:  BSF    03.5
032F:  MOVWF  07
0330:  MOVLW  03
0331:  MOVWF  77
0332:  DECFSZ 77,F
0333:  GOTO   332
0334:  BCF    03.5
0335:  BCF    07.4
0336:  BCF    4D.4
0337:  MOVF   4D,W
0338:  BSF    03.5
0339:  MOVWF  07
....................  
.................... #define EEPROM_ADDRESS BYTE 
.................... #define EEPROM_SIZE    128 
....................  
.................... void init_ext_eeprom() { 
....................    output_float(EEPROM_SCL); 
....................    output_float(EEPROM_SDA); 
.................... } 
....................  
.................... BOOLEAN ext_eeprom_ready() { 
....................    int1 ack; 
....................    i2c_start();            // If the write command is acknowledged, 
*
024A:  BSF    4D.4
024B:  MOVF   4D,W
024C:  BSF    03.5
024D:  MOVWF  07
024E:  MOVLW  04
024F:  MOVWF  77
0250:  DECFSZ 77,F
0251:  GOTO   250
0252:  BCF    03.5
0253:  BSF    4D.3
0254:  MOVF   4D,W
0255:  BSF    03.5
0256:  MOVWF  07
0257:  MOVLW  03
0258:  MOVWF  77
0259:  DECFSZ 77,F
025A:  GOTO   259
025B:  BCF    03.5
025C:  BCF    07.4
025D:  BCF    4D.4
025E:  MOVF   4D,W
025F:  BSF    03.5
0260:  MOVWF  07
0261:  MOVLW  04
0262:  MOVWF  77
0263:  DECFSZ 77,F
0264:  GOTO   263
0265:  BCF    03.5
0266:  BCF    07.3
0267:  BCF    4D.3
0268:  MOVF   4D,W
0269:  BSF    03.5
026A:  MOVWF  07
....................    ack = i2c_write(0xa0);  // then the device is ready. 
026B:  MOVLW  A0
026C:  BCF    03.5
026D:  MOVWF  66
026E:  CALL   1EE
026F:  MOVF   78,W
0270:  BCF    65.0
0271:  BTFSC  78.0
0272:  BSF    65.0
....................    i2c_stop(); 
0273:  BCF    4D.4
0274:  MOVF   4D,W
0275:  BSF    03.5
0276:  MOVWF  07
0277:  NOP
0278:  BCF    03.5
0279:  BSF    4D.3
027A:  MOVF   4D,W
027B:  BSF    03.5
027C:  MOVWF  07
027D:  BCF    03.5
027E:  BTFSS  07.3
027F:  GOTO   27E
0280:  MOVLW  04
0281:  MOVWF  77
0282:  DECFSZ 77,F
0283:  GOTO   282
0284:  GOTO   285
0285:  NOP
0286:  BSF    4D.4
0287:  MOVF   4D,W
0288:  BSF    03.5
0289:  MOVWF  07
028A:  MOVLW  04
028B:  MOVWF  77
028C:  DECFSZ 77,F
028D:  GOTO   28C
....................    return !ack; 
028E:  MOVLW  00
028F:  BCF    03.5
0290:  BTFSS  65.0
0291:  MOVLW  01
0292:  MOVWF  78
0293:  RETURN
.................... } 
....................  
.................... void write_ext_eeprom(BYTE address, BYTE data) { 
....................    while(!ext_eeprom_ready()); 
*
0371:  CALL   24A
0372:  MOVF   78,F
0373:  BTFSC  03.2
0374:  GOTO   371
....................    i2c_start(); 
0375:  BSF    4D.4
0376:  MOVF   4D,W
0377:  BSF    03.5
0378:  MOVWF  07
0379:  MOVLW  04
037A:  MOVWF  77
037B:  DECFSZ 77,F
037C:  GOTO   37B
037D:  BCF    03.5
037E:  BSF    4D.3
037F:  MOVF   4D,W
0380:  BSF    03.5
0381:  MOVWF  07
0382:  MOVLW  03
0383:  MOVWF  77
0384:  DECFSZ 77,F
0385:  GOTO   384
0386:  BCF    03.5
0387:  BCF    07.4
0388:  BCF    4D.4
0389:  MOVF   4D,W
038A:  BSF    03.5
038B:  MOVWF  07
038C:  MOVLW  04
038D:  MOVWF  77
038E:  DECFSZ 77,F
038F:  GOTO   38E
0390:  BCF    03.5
0391:  BCF    07.3
0392:  BCF    4D.3
0393:  MOVF   4D,W
0394:  BSF    03.5
0395:  MOVWF  07
....................    i2c_write(0xa0); 
0396:  MOVLW  A0
0397:  BCF    03.5
0398:  MOVWF  66
0399:  CALL   1EE
....................    i2c_write(address); 
039A:  MOVF   60,W
039B:  MOVWF  66
039C:  CALL   1EE
....................    i2c_write(data); 
039D:  MOVF   61,W
039E:  MOVWF  66
039F:  CALL   1EE
....................    i2c_stop(); 
03A0:  BCF    4D.4
03A1:  MOVF   4D,W
03A2:  BSF    03.5
03A3:  MOVWF  07
03A4:  NOP
03A5:  BCF    03.5
03A6:  BSF    4D.3
03A7:  MOVF   4D,W
03A8:  BSF    03.5
03A9:  MOVWF  07
03AA:  BCF    03.5
03AB:  BTFSS  07.3
03AC:  GOTO   3AB
03AD:  MOVLW  04
03AE:  MOVWF  77
03AF:  DECFSZ 77,F
03B0:  GOTO   3AF
03B1:  GOTO   3B2
03B2:  NOP
03B3:  BSF    4D.4
03B4:  MOVF   4D,W
03B5:  BSF    03.5
03B6:  MOVWF  07
03B7:  MOVLW  04
03B8:  MOVWF  77
03B9:  DECFSZ 77,F
03BA:  GOTO   3B9
03BB:  BCF    03.5
03BC:  RETURN
.................... } 
....................  
....................  
.................... BYTE read_ext_eeprom(BYTE address) { 
....................    BYTE data; 
....................  
....................    while(!ext_eeprom_ready()); 
*
0294:  CALL   24A
0295:  MOVF   78,F
0296:  BTFSC  03.2
0297:  GOTO   294
....................    i2c_start(); 
0298:  BSF    4D.4
0299:  MOVF   4D,W
029A:  BSF    03.5
029B:  MOVWF  07
029C:  MOVLW  04
029D:  MOVWF  77
029E:  DECFSZ 77,F
029F:  GOTO   29E
02A0:  BCF    03.5
02A1:  BSF    4D.3
02A2:  MOVF   4D,W
02A3:  BSF    03.5
02A4:  MOVWF  07
02A5:  MOVLW  03
02A6:  MOVWF  77
02A7:  DECFSZ 77,F
02A8:  GOTO   2A7
02A9:  BCF    03.5
02AA:  BCF    07.4
02AB:  BCF    4D.4
02AC:  MOVF   4D,W
02AD:  BSF    03.5
02AE:  MOVWF  07
02AF:  MOVLW  04
02B0:  MOVWF  77
02B1:  DECFSZ 77,F
02B2:  GOTO   2B1
02B3:  BCF    03.5
02B4:  BCF    07.3
02B5:  BCF    4D.3
02B6:  MOVF   4D,W
02B7:  BSF    03.5
02B8:  MOVWF  07
....................    i2c_write(0xa0); 
02B9:  MOVLW  A0
02BA:  BCF    03.5
02BB:  MOVWF  66
02BC:  CALL   1EE
....................    i2c_write(address); 
02BD:  MOVF   63,W
02BE:  MOVWF  66
02BF:  CALL   1EE
....................    i2c_start(); 
02C0:  BSF    4D.4
02C1:  MOVF   4D,W
02C2:  BSF    03.5
02C3:  MOVWF  07
02C4:  MOVLW  04
02C5:  MOVWF  77
02C6:  DECFSZ 77,F
02C7:  GOTO   2C6
02C8:  BCF    03.5
02C9:  BSF    4D.3
02CA:  MOVF   4D,W
02CB:  BSF    03.5
02CC:  MOVWF  07
02CD:  MOVLW  03
02CE:  MOVWF  77
02CF:  DECFSZ 77,F
02D0:  GOTO   2CF
02D1:  BCF    03.5
02D2:  BTFSS  07.3
02D3:  GOTO   2D2
02D4:  BCF    07.4
02D5:  BCF    4D.4
02D6:  MOVF   4D,W
02D7:  BSF    03.5
02D8:  MOVWF  07
02D9:  MOVLW  04
02DA:  MOVWF  77
02DB:  DECFSZ 77,F
02DC:  GOTO   2DB
02DD:  BCF    03.5
02DE:  BCF    07.3
02DF:  BCF    4D.3
02E0:  MOVF   4D,W
02E1:  BSF    03.5
02E2:  MOVWF  07
....................    i2c_write(0xa1); 
02E3:  MOVLW  A1
02E4:  BCF    03.5
02E5:  MOVWF  66
02E6:  CALL   1EE
....................    data=i2c_read(0); 
02E7:  CLRF   77
*
033A:  MOVF   78,W
033B:  BCF    03.5
033C:  MOVWF  64
....................    i2c_stop(); 
033D:  BCF    4D.4
033E:  MOVF   4D,W
033F:  BSF    03.5
0340:  MOVWF  07
0341:  NOP
0342:  BCF    03.5
0343:  BSF    4D.3
0344:  MOVF   4D,W
0345:  BSF    03.5
0346:  MOVWF  07
0347:  BCF    03.5
0348:  BTFSS  07.3
0349:  GOTO   348
034A:  MOVLW  04
034B:  MOVWF  77
034C:  DECFSZ 77,F
034D:  GOTO   34C
034E:  GOTO   34F
034F:  NOP
0350:  BSF    4D.4
0351:  MOVF   4D,W
0352:  BSF    03.5
0353:  MOVWF  07
0354:  MOVLW  04
0355:  MOVWF  77
0356:  DECFSZ 77,F
0357:  GOTO   356
....................    return(data); 
0358:  BCF    03.5
0359:  MOVF   64,W
035A:  MOVWF  78
035B:  RETURN
.................... } 
....................  
....................  
.................... #include "kbd_board4.c" 
.................... /*######################################################################  
....................    Rotina utilizaÃ§Ã£o do teclado da placa PicSim board4 
....................    Adaptada para o compilador CCS 
....................    Autor: Alberto Willia Mascarenhas (adaptou para o compilador) 
....................    For e-mail suggestions :  awmascarenhas@gmail.com 
.................... ######################################################################## */ 
.................... unsigned char tc_tecla(unsigned int timeout) 
.................... { 
....................   unsigned int to=0; 
....................   unsigned char k = 0;   
....................   while(((to < timeout)||(!timeout))&&(!k)){ 
....................  
....................       //------------------------------------------------------------------------- 
....................       //inicio do programa de varredura do teclado matricial 
....................       //-------------------------------------------------------------------------- 
....................       //habilita primeira coluna do teclado 
....................       output_low(PIN_B0);output_high(PIN_B1);output_high(PIN_B2); 
....................       delay_ms(20); 
....................       if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='1';}; 
....................       if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='4';}; 
....................       if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='7';}; 
....................       if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='*';}; 
....................        
....................       //habilita segunda coluna do teclado 
....................       output_high(PIN_B0);output_low(PIN_B1);output_high(PIN_B2); 
....................       delay_ms(20);       
....................       if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='2';}; 
....................       if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='5';}; 
....................       if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='8';}; 
....................       if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='0';}; 
....................        
....................       //habilita terceira coluna do teclado 
....................       output_high(PIN_B0);output_high(PIN_B1);output_low(PIN_B2); 
....................       delay_ms(20);       
....................       if (input(PIN_D0) == 0){while(input(PIN_D0) == 0);k='3';}; 
....................       if (input(PIN_D1) == 0){while(input(PIN_D1) == 0);k='6';}; 
....................       if (input(PIN_D2) == 0){while(input(PIN_D2) == 0);k='9';}; 
....................       if (input(PIN_D3) == 0){while(input(PIN_D3) == 0);k='#';}; 
....................        
....................       delay_ms(5); 
....................       to+=5; 
....................   } 
....................    if(!k)k=255; 
....................   return k;   
.................... } 
....................  
....................  
....................  
.................... #int_TIMER1 
.................... void TIMER1_isr(void) 
.................... { 
....................  
....................     // //------------------------------------------- 
....................     // tmp = tc_tecla(1000); // ms 
....................     // //------------------------------------------- 
....................     // if(tmp!=255){ 
....................       
....................     //    write_ext_eeprom(0, tmp); 
....................     //    delay_ms(50); 
....................     //    tmp_result = read_ext_eeprom(0); 
....................     //    delay_ms(50); 
....................     //    // tmp_result = tmp; 
....................     //    printf (lcd_escreve,"\f Button: %c", tmp_result); 
....................  
....................     //   }else{  
....................  
....................     //    printf (lcd_escreve,"\f   TECLADO  "); 
....................     //  } 
....................  
.................... } 
....................  
*
0060:  BCF    0C.0
0061:  BCF    0A.3
0062:  BCF    0A.4
0063:  GOTO   031
.................... #int_RTCC 
.................... void RTCC_isr(void) 
.................... { 
....................  
....................  
....................     
....................        
0064:  BCF    0B.2
0065:  BCF    0A.3
0066:  BCF    0A.4
0067:  GOTO   031
.................... } 
....................  
.................... void main() 
*
04F5:  MOVF   03,W
04F6:  ANDLW  1F
04F7:  MOVWF  03
04F8:  CLRF   2E
04F9:  CLRF   2F
04FA:  CLRF   3D
04FB:  CLRF   3E
04FC:  MOVLW  FF
04FD:  MOVWF  4D
04FE:  BSF    03.5
04FF:  BSF    1F.0
0500:  BSF    1F.1
0501:  BSF    1F.2
0502:  BCF    1F.3
0503:  MOVLW  07
0504:  MOVWF  1C
0505:  BCF    03.7
.................... { 
....................    //VARIAVEIS 
....................    byte result; 
....................     
....................    eeprom_address address; 
....................  
....................    // unsigned char tmp_result; 
....................    setup_timer_0(RTCC_INTERNAL|RTCC_DIV_256|RTCC_8_bit);      //13.1ms overflow 
0506:  MOVF   01,W
0507:  ANDLW  C0
0508:  IORLW  07
0509:  MOVWF  01
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); //Overflow in 104ms | Resolution 1.6 us 
050A:  MOVLW  B5
050B:  BCF    03.5
050C:  MOVWF  10
....................  
....................    // init_ext_eeprom(); 
....................  
....................    // enable_interrupts(INT_TIMER0); 
....................    // enable_interrupts(INT_TIMER1); 
....................  
....................    // enable_interrupts(GLOBAL); 
....................  
....................  
....................    lcd_ini(); 
050D:  GOTO   124
....................    delay_us(50); 
050E:  MOVLW  52
050F:  MOVWF  77
0510:  DECFSZ 77,F
0511:  GOTO   510
0512:  GOTO   513
0513:  NOP
....................    printf(lcd_escreve, "\f  iniciando... "); 
0514:  MOVLW  68
0515:  BSF    03.6
0516:  MOVWF  0D
0517:  MOVLW  00
0518:  MOVWF  0F
0519:  BCF    03.6
051A:  CALL   198
....................    delay_ms(1000); 
051B:  MOVLW  04
051C:  MOVWF  54
051D:  MOVLW  FA
051E:  MOVWF  6A
051F:  CALL   0C2
0520:  DECFSZ 54,F
0521:  GOTO   51D
....................  
....................    printf(lcd_escreve, "\fIFMT - Serial"); 
0522:  MOVLW  71
0523:  BSF    03.6
0524:  MOVWF  0D
0525:  MOVLW  00
0526:  MOVWF  0F
0527:  BCF    03.6
0528:  CALL   198
....................  
....................     
....................    
....................    delay_ms(50); 
0529:  MOVLW  32
052A:  MOVWF  6A
052B:  CALL   0C2
....................    // if(data_avail){ 
....................    output_high(PIN_D3); 
052C:  BSF    03.5
052D:  BCF    08.3
052E:  BCF    03.5
052F:  BSF    08.3
....................    data_avail = FALSE; 
0530:  CLRF   3D
....................    int pass [4] = {1,2,3,4}; 
0531:  MOVLW  01
0532:  MOVWF  50
0533:  MOVLW  02
0534:  MOVWF  51
0535:  MOVLW  03
0536:  MOVWF  52
0537:  MOVLW  04
0538:  MOVWF  53
....................    saveUser(145, pass, 1, 1); 
0539:  MOVLW  91
053A:  MOVWF  54
053B:  CLRF   56
053C:  MOVLW  50
053D:  MOVWF  55
053E:  MOVLW  01
053F:  MOVWF  57
0540:  MOVWF  58
0541:  CALL   3BD
....................  
....................    saveUser(145, pass, 1, 0);   
0542:  MOVLW  91
0543:  MOVWF  54
0544:  CLRF   56
0545:  MOVLW  50
0546:  MOVWF  55
0547:  MOVLW  01
0548:  MOVWF  57
0549:  CLRF   58
054A:  CALL   3BD
....................    saveUser(141, pass, 1, 1); 
054B:  MOVLW  8D
054C:  MOVWF  54
054D:  CLRF   56
054E:  MOVLW  50
054F:  MOVWF  55
0550:  MOVLW  01
0551:  MOVWF  57
0552:  MOVWF  58
0553:  CALL   3BD
....................   
....................   // address_data_delete = getAddressByID(6); 
....................   // printf(lcd_escreve, "\f Address ID = %d", address_data_delete); 
....................  //  deleteBlock(address_data_delete); 
....................    delay_ms(50); 
0554:  MOVLW  32
0555:  MOVWF  6A
0556:  CALL   0C2
....................    // printUser(); 
....................    delay_ms(1000); 
0557:  MOVLW  04
0558:  MOVWF  54
0559:  MOVLW  FA
055A:  MOVWF  6A
055B:  CALL   0C2
055C:  DECFSZ 54,F
055D:  GOTO   559
....................     
....................    while(TRUE) 
....................    { 
055E:  GOTO   55E
....................     
....................    } 
....................  
.................... } 
.................... /* 
055F:  SLEEP
.................... int incrementID(){ 
....................    int greatest_id = 0 ,address = 0;    
....................     
....................    erase_program_eeprom(0);  
....................    int id_temp = read_ext_eeprom(address);    
....................  
....................    while( id_temp  != -1){ 
....................        
....................       if(id_temp > greatest_id ){ 
....................          greatest_id = id_temp; 
....................       }      
....................       
....................       address += BLOCK_SIZE; 
....................       id_temp = read_ext_eeprom(address); 
....................        
....................    } 
....................    
....................     
....................    return ++greatest_id; 
....................      
.................... } 
.................... */ 
.................... void saveUser(int id, int * pass, int status, int type_usr){ 
....................  
....................     
....................     
....................    if( id < 256 && getAddressByID(id) > -1 ){ 
*
03BD:  MOVF   54,W
03BE:  MOVWF  60
....................       //recebe os parÃ¢metros do usuÃ¡rio 
....................       User user; 
....................       user.id = id; 
*
049F:  MOVF   54,W
04A0:  MOVWF  59
....................       user.pass[0] = pass[0]; 
04A1:  MOVF   55,W
04A2:  MOVWF  04
04A3:  BCF    03.7
04A4:  BTFSC  56.0
04A5:  BSF    03.7
04A6:  MOVF   00,W
04A7:  MOVWF  5A
....................       user.pass[1] = pass[1]; 
04A8:  MOVLW  01
04A9:  ADDWF  55,W
04AA:  MOVWF  04
04AB:  BCF    03.7
04AC:  BTFSC  56.0
04AD:  BSF    03.7
04AE:  MOVF   00,W
04AF:  MOVWF  5B
....................       user.pass[2] = pass[2]; 
04B0:  MOVLW  02
04B1:  ADDWF  55,W
04B2:  MOVWF  04
04B3:  BCF    03.7
04B4:  BTFSC  56.0
04B5:  BSF    03.7
04B6:  MOVF   00,W
04B7:  MOVWF  5C
....................       user.pass[3] = pass[3]; 
04B8:  MOVLW  03
04B9:  ADDWF  55,W
04BA:  MOVWF  04
04BB:  BCF    03.7
04BC:  BTFSC  56.0
04BD:  BSF    03.7
04BE:  MOVF   00,W
04BF:  MOVWF  5D
....................       user.status = status; 
04C0:  MOVF   57,W
04C1:  MOVWF  5E
....................       user.type_usr = type_usr; 
04C2:  MOVF   58,W
04C3:  MOVWF  5F
....................        
....................       write_ext_eeprom(0, user.id); 
04C4:  CLRF   60
04C5:  MOVF   59,W
04C6:  MOVWF  61
04C7:  CALL   371
....................       write_ext_eeprom(1, user.pass[0]); 
04C8:  MOVLW  01
04C9:  MOVWF  60
04CA:  MOVF   5A,W
04CB:  MOVWF  61
04CC:  CALL   371
....................       write_ext_eeprom(2, user.pass[1]); 
04CD:  MOVLW  02
04CE:  MOVWF  60
04CF:  MOVF   5B,W
04D0:  MOVWF  61
04D1:  CALL   371
....................       write_ext_eeprom(3, user.pass[2]); 
04D2:  MOVLW  03
04D3:  MOVWF  60
04D4:  MOVF   5C,W
04D5:  MOVWF  61
04D6:  CALL   371
....................       write_ext_eeprom(4, user.pass[3]);        
04D7:  MOVLW  04
04D8:  MOVWF  60
04D9:  MOVF   5D,W
04DA:  MOVWF  61
04DB:  CALL   371
....................       write_ext_eeprom(5, user.status); 
04DC:  MOVLW  05
04DD:  MOVWF  60
04DE:  MOVF   5E,W
04DF:  MOVWF  61
04E0:  CALL   371
....................       write_ext_eeprom(6, user.type_usr); 
04E1:  MOVLW  06
04E2:  MOVWF  60
04E3:  MOVF   5F,W
04E4:  MOVWF  61
04E5:  CALL   371
....................  
....................       printf (lcd_escreve,"\fUsuario Cadastrado"); 
04E6:  MOVLW  79
04E7:  BSF    03.6
04E8:  MOVWF  0D
04E9:  MOVLW  00
04EA:  MOVWF  0F
04EB:  BCF    03.6
04EC:  CALL   198
....................       delay_ms(1000); 
04ED:  MOVLW  04
04EE:  MOVWF  60
04EF:  MOVLW  FA
04F0:  MOVWF  6A
04F1:  CALL   0C2
04F2:  DECFSZ 60,F
04F3:  GOTO   4EF
....................  
....................    }else{ 
....................       printf (lcd_escreve,"\fID incompativel"); 
....................       printf (lcd_escreve,"\r\nTente novamente"); 
....................       delay_ms(1000); 
....................  
....................    } 
04F4:  RETURN
.................... } 
....................  
.................... void printUser(){ 
....................    //delay_ms(50); 
....................    tmp_result = read_ext_eeprom(0);   
....................     
....................    delay_ms(50);   
....................     
....................    printf (lcd_escreve,"\f Button: %d", tmp_result); 
....................    printf(lcd_escreve, "\r\nPw:%d%d%d%d St:%d %d", read_ext_eeprom(1), read_ext_eeprom(2), read_ext_eeprom(3), read_ext_eeprom(4), read_ext_eeprom(5), read_ext_eeprom(6)); 
....................     
....................    //printf(lcd_escreve, "\f Client () elseÂ´{}{} 
....................    // printf(lcd_escreve, "\r\nPw:%c%c%c%c St:%c %c", U1.pass[0], U1.pass[1], U1.pass[2], U1.pass[3], U1.status, U1.type_usr); 
.................... } 
....................  
.................... int getAddressByID(int id){ 
*
03BF:  CLRF   62
....................    int id_temp; 
....................    int address = 0; 
....................     
....................    while( read_ext_eeprom(address) != -1){ 
03C0:  MOVF   62,W
03C1:  MOVWF  63
03C2:  CALL   294
03C3:  MOVF   78,W
03C4:  SUBLW  FF
03C5:  BTFSC  03.2
03C6:  GOTO   496
....................       id_temp = read_ext_eeprom(address); 
03C7:  MOVF   62,W
03C8:  MOVWF  63
03C9:  CALL   294
03CA:  MOVF   78,W
03CB:  MOVWF  61
....................       if (id_temp == id){ 
03CC:  MOVF   60,W
03CD:  SUBWF  61,W
03CE:  BTFSS  03.2
03CF:  GOTO   493
....................           printf (lcd_escreve,"\fID Encontrado:%d", id_temp); 
03D0:  MOVLW  A8
03D1:  BSF    03.6
03D2:  MOVWF  0D
03D3:  MOVLW  00
03D4:  MOVWF  0F
03D5:  BCF    03.0
03D6:  MOVLW  0F
03D7:  BCF    03.6
03D8:  MOVWF  63
*
042F:  MOVF   61,W
0430:  MOVWF  63
0431:  MOVLW  18
0432:  MOVWF  64
....................           delay_ms(1000); 
*
0489:  MOVLW  04
048A:  MOVWF  63
048B:  MOVLW  FA
048C:  MOVWF  6A
048D:  CALL   0C2
048E:  DECFSZ 63,F
048F:  GOTO   48B
....................          return address; 
0490:  MOVF   62,W
0491:  MOVWF  78
0492:  GOTO   49F
....................       } 
....................  
....................       address += BLOCK_SIZE;  
0493:  MOVLW  07
0494:  ADDWF  62,F
0495:  GOTO   3C0
....................    } 
....................    printf (lcd_escreve,"\f ID N Encontrado"); 
0496:  MOVLW  B1
0497:  BSF    03.6
0498:  MOVWF  0D
0499:  MOVLW  00
049A:  MOVWF  0F
049B:  BCF    03.6
049C:  CALL   198
....................    return -1; 
049D:  MOVLW  FF
049E:  MOVWF  78
....................     
.................... } 
....................  
.................... void erase_program_eeprom(int addrr){ 
....................    for(int i=0; i < BLOCK_SIZE; i++){ 
....................          write_ext_eeprom(addrr + i, -1); 
....................    }   
....................    printf (lcd_escreve,"\f User erased "); 
....................    delay_ms(2000); 
.................... } 
....................  
.................... int deleteBlock(int8 address){ 
....................     
....................    int data_temp; 
....................    int previous_block = address; 
....................    int next_block = address + BLOCK_SIZE; 
....................  
....................    //Case 1: without next block 
....................    if (read_ext_eeprom(next_block) == -1){ 
....................       erase_program_eeprom(previous_block);       
....................       return 1; 
....................    } 
....................  
....................    //Case 2: Check whether the data in the address is empty 
....................    while(read_ext_eeprom(next_block) != -1){ 
....................       //data_temp[index] = read_ext_eeprom(address); 
....................       for(int i=0; i < BLOCK_SIZE; i++){ 
....................          data_temp = read_ext_eeprom(next_block + i);            
....................          write_ext_eeprom(previous_block + i, data_temp);    //overwrite delete block 
....................       }   
....................  
....................       previous_block = next_block; 
....................       next_block += BLOCK_SIZE; 
....................    } 
....................     
....................    next_block -= BLOCK_SIZE; 
....................     
....................    //Erase last block   
....................    erase_program_eeprom(next_block); 
....................     
....................    return 1; 
....................  
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
